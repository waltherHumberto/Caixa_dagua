
caixa_dagua.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  000018d6  0000196a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  008001a6  008001a6  00001a10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025dd  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa6  00000000  00000000  00004315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001658  00000000  00000000  000052bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005e0  00000000  00000000  00006914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b5  00000000  00000000  00006ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018d1  00000000  00000000  000077a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000907a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_10>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ed       	ldi	r30, 0xD6	; 214
      7c:	f8 e1       	ldi	r31, 0x18	; 24
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3a       	cpi	r26, 0xA6	; 166
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 ea       	ldi	r26, 0xA6	; 166
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 33       	cpi	r26, 0x3D	; 61
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <main>
      9e:	0c 94 69 0c 	jmp	0x18d2	; 0x18d2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_read>:
    while ((c = pgm_read_byte(progmem_s++)))
    {
        lcd_putc(c);
    }

} /* lcd_puts_p */
      a6:	cf 93       	push	r28
      a8:	88 23       	and	r24, r24
      aa:	31 f0       	breq	.+12     	; 0xb8 <lcd_read+0x12>
      ac:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
      b0:	81 60       	ori	r24, 0x01	; 1
      b2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
      b6:	05 c0       	rjmp	.+10     	; 0xc2 <lcd_read+0x1c>
      b8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
      bc:	8e 7f       	andi	r24, 0xFE	; 254
      be:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
      c2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
      c6:	82 60       	ori	r24, 0x02	; 2
      c8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
      cc:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
      d6:	62 e0       	ldi	r22, 0x02	; 2
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	0e 94 0a 06 	call	0xc14	; 0xc14 <pcf8574_setoutputpinhigh>
      de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_read+0x3a>
      e0:	64 e0       	ldi	r22, 0x04	; 4
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
      e8:	88 23       	and	r24, r24
      ea:	11 f0       	breq	.+4      	; 0xf0 <lcd_read+0x4a>
      ec:	c0 e0       	ldi	r28, 0x00	; 0
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0x4c>
      f0:	c0 e1       	ldi	r28, 0x10	; 16
      f2:	65 e0       	ldi	r22, 0x05	; 5
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
      fa:	81 11       	cpse	r24, r1
      fc:	01 c0       	rjmp	.+2      	; 0x100 <lcd_read+0x5a>
      fe:	c0 62       	ori	r28, 0x20	; 32
     100:	66 e0       	ldi	r22, 0x06	; 6
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     108:	81 11       	cpse	r24, r1
     10a:	01 c0       	rjmp	.+2      	; 0x10e <lcd_read+0x68>
     10c:	c0 64       	ori	r28, 0x40	; 64
     10e:	67 e0       	ldi	r22, 0x07	; 7
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     116:	81 11       	cpse	r24, r1
     118:	01 c0       	rjmp	.+2      	; 0x11c <lcd_read+0x76>
     11a:	c0 68       	ori	r28, 0x80	; 128
     11c:	62 e0       	ldi	r22, 0x02	; 2
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 0e 06 	call	0xc1c	; 0xc1c <pcf8574_setoutputpinlow>
     124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_read+0x80>
     126:	62 e0       	ldi	r22, 0x02	; 2
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 0a 06 	call	0xc14	; 0xc14 <pcf8574_setoutputpinhigh>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_read+0x8a>
     130:	64 e0       	ldi	r22, 0x04	; 4
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     138:	81 11       	cpse	r24, r1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <lcd_read+0x98>
     13c:	c1 60       	ori	r28, 0x01	; 1
     13e:	65 e0       	ldi	r22, 0x05	; 5
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     146:	81 11       	cpse	r24, r1
     148:	01 c0       	rjmp	.+2      	; 0x14c <lcd_read+0xa6>
     14a:	c2 60       	ori	r28, 0x02	; 2
     14c:	66 e0       	ldi	r22, 0x06	; 6
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     154:	81 11       	cpse	r24, r1
     156:	01 c0       	rjmp	.+2      	; 0x15a <lcd_read+0xb4>
     158:	c4 60       	ori	r28, 0x04	; 4
     15a:	67 e0       	ldi	r22, 0x07	; 7
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0e 94 27 06 	call	0xc4e	; 0xc4e <pcf8574_getinputpin>
     162:	81 11       	cpse	r24, r1
     164:	01 c0       	rjmp	.+2      	; 0x168 <lcd_read+0xc2>
     166:	c8 60       	ori	r28, 0x08	; 8
     168:	62 e0       	ldi	r22, 0x02	; 2
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 0e 06 	call	0xc1c	; 0xc1c <pcf8574_setoutputpinlow>
     170:	8c 2f       	mov	r24, r28
     172:	cf 91       	pop	r28
     174:	08 95       	ret

00000176 <lcd_waitbusy>:
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_read>
     17c:	88 23       	and	r24, r24
     17e:	dc f3       	brlt	.-10     	; 0x176 <lcd_waitbusy>
     180:	00 c0       	rjmp	.+0      	; 0x182 <lcd_waitbusy+0xc>
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_read>
     188:	08 95       	ret

0000018a <toggle_e>:
     18a:	62 e0       	ldi	r22, 0x02	; 2
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	0e 94 0a 06 	call	0xc14	; 0xc14 <pcf8574_setoutputpinhigh>
     192:	00 c0       	rjmp	.+0      	; 0x194 <toggle_e+0xa>
     194:	62 e0       	ldi	r22, 0x02	; 2
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 0e 06 	call	0xc1c	; 0xc1c <pcf8574_setoutputpinlow>
     19c:	08 95       	ret

0000019e <lcd_write>:
     19e:	cf 93       	push	r28
     1a0:	c8 2f       	mov	r28, r24
     1a2:	66 23       	and	r22, r22
     1a4:	31 f0       	breq	.+12     	; 0x1b2 <lcd_write+0x14>
     1a6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1aa:	81 60       	ori	r24, 0x01	; 1
     1ac:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1b0:	05 c0       	rjmp	.+10     	; 0x1bc <lcd_write+0x1e>
     1b2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1b6:	8e 7f       	andi	r24, 0xFE	; 254
     1b8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1bc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1c0:	8d 7f       	andi	r24, 0xFD	; 253
     1c2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1c6:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
     1d0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1d4:	8f 77       	andi	r24, 0x7F	; 127
     1d6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1da:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1de:	8f 7b       	andi	r24, 0xBF	; 191
     1e0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1e4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1e8:	8f 7d       	andi	r24, 0xDF	; 223
     1ea:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1ee:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     1f2:	8f 7e       	andi	r24, 0xEF	; 239
     1f4:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     1f8:	cc 23       	and	r28, r28
     1fa:	2c f4       	brge	.+10     	; 0x206 <lcd_write+0x68>
     1fc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     200:	80 68       	ori	r24, 0x80	; 128
     202:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     206:	c6 ff       	sbrs	r28, 6
     208:	05 c0       	rjmp	.+10     	; 0x214 <lcd_write+0x76>
     20a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     20e:	80 64       	ori	r24, 0x40	; 64
     210:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     214:	c5 ff       	sbrs	r28, 5
     216:	05 c0       	rjmp	.+10     	; 0x222 <lcd_write+0x84>
     218:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     21c:	80 62       	ori	r24, 0x20	; 32
     21e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     222:	c4 ff       	sbrs	r28, 4
     224:	05 c0       	rjmp	.+10     	; 0x230 <lcd_write+0x92>
     226:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     22a:	80 61       	ori	r24, 0x10	; 16
     22c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     230:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
     23a:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
     23e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     242:	8f 77       	andi	r24, 0x7F	; 127
     244:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     248:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     24c:	8f 7b       	andi	r24, 0xBF	; 191
     24e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     252:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     256:	8f 7d       	andi	r24, 0xDF	; 223
     258:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     25c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     260:	8f 7e       	andi	r24, 0xEF	; 239
     262:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     266:	c3 ff       	sbrs	r28, 3
     268:	05 c0       	rjmp	.+10     	; 0x274 <lcd_write+0xd6>
     26a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     26e:	80 68       	ori	r24, 0x80	; 128
     270:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     274:	c2 ff       	sbrs	r28, 2
     276:	05 c0       	rjmp	.+10     	; 0x282 <lcd_write+0xe4>
     278:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     282:	c1 ff       	sbrs	r28, 1
     284:	05 c0       	rjmp	.+10     	; 0x290 <lcd_write+0xf2>
     286:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     28a:	80 62       	ori	r24, 0x20	; 32
     28c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     290:	c0 ff       	sbrs	r28, 0
     292:	05 c0       	rjmp	.+10     	; 0x29e <lcd_write+0x100>
     294:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     298:	80 61       	ori	r24, 0x10	; 16
     29a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     29e:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
     2a8:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
     2ac:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2b0:	80 61       	ori	r24, 0x10	; 16
     2b2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     2b6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2ba:	80 62       	ori	r24, 0x20	; 32
     2bc:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     2c0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     2ca:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     2ce:	80 68       	ori	r24, 0x80	; 128
     2d0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
     2d4:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <lcd_command>:
     2e2:	cf 93       	push	r28
     2e4:	c8 2f       	mov	r28, r24
     2e6:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_waitbusy>
     2ea:	60 e0       	ldi	r22, 0x00	; 0
     2ec:	8c 2f       	mov	r24, r28
     2ee:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <lcd_clrscr>:
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>
     2fc:	08 95       	ret

000002fe <lcd_putc>:
     2fe:	cf 93       	push	r28
     300:	c8 2f       	mov	r28, r24
     302:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_waitbusy>
     306:	ca 30       	cpi	r28, 0x0A	; 10
     308:	49 f4       	brne	.+18     	; 0x31c <lcd_putc+0x1e>
     30a:	80 34       	cpi	r24, 0x40	; 64
     30c:	10 f4       	brcc	.+4      	; 0x312 <lcd_putc+0x14>
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	01 c0       	rjmp	.+2      	; 0x314 <lcd_putc+0x16>
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	80 58       	subi	r24, 0x80	; 128
     316:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>
     31a:	13 c0       	rjmp	.+38     	; 0x342 <lcd_putc+0x44>
     31c:	80 31       	cpi	r24, 0x10	; 16
     31e:	29 f4       	brne	.+10     	; 0x32a <lcd_putc+0x2c>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	80 ec       	ldi	r24, 0xC0	; 192
     324:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     328:	06 c0       	rjmp	.+12     	; 0x336 <lcd_putc+0x38>
     32a:	80 35       	cpi	r24, 0x50	; 80
     32c:	21 f4       	brne	.+8      	; 0x336 <lcd_putc+0x38>
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	80 e8       	ldi	r24, 0x80	; 128
     332:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     336:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_waitbusy>
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	8c 2f       	mov	r24, r28
     33e:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <lcd_puts>:
     346:	cf 93       	push	r28
     348:	df 93       	push	r29
     34a:	fc 01       	movw	r30, r24
     34c:	03 c0       	rjmp	.+6      	; 0x354 <lcd_puts+0xe>
     34e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_putc>
     352:	fe 01       	movw	r30, r28
     354:	ef 01       	movw	r28, r30
     356:	21 96       	adiw	r28, 0x01	; 1
     358:	80 81       	ld	r24, Z
     35a:	81 11       	cpse	r24, r1
     35c:	f8 cf       	rjmp	.-16     	; 0x34e <lcd_puts+0x8>
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	18 2f       	mov	r17, r24
#if LCD_PCF8574_INIT == 1
    //init pcf8574
    pcf8574_init();
     36c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <pcf8574_init>
#endif

    dataport = 0;
     370:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     374:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
static inline void _delayFourCycles(unsigned int __count)
{
    if (__count == 0)
        __asm__ __volatile__("rjmp 1f\n 1:"); // 2 cycles
    else
        __asm__ __volatile__(
     37e:	80 ea       	ldi	r24, 0xA0	; 160
     380:	9f e0       	ldi	r25, 0x0F	; 15
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <lcd_init+0x1e>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);

    delay(16000); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    dataport |= _BV(LCD_DATA1_PIN); // _BV(LCD_FUNCTION)>>4;
     386:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     38a:	80 62       	ori	r24, 0x20	; 32
     38c:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
    dataport |= _BV(LCD_DATA0_PIN); // _BV(LCD_FUNCTION_8BIT)>>4;
     390:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     394:	80 61       	ori	r24, 0x10	; 16
     396:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     39a:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>

    lcd_e_toggle();
     3a4:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if (__count == 0)
        __asm__ __volatile__("rjmp 1f\n 1:"); // 2 cycles
    else
        __asm__ __volatile__(
     3a8:	80 ee       	ldi	r24, 0xE0	; 224
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_init+0x48>

    lcd_e_toggle();
    delay(4992); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     3b0:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if (__count == 0)
        __asm__ __volatile__("rjmp 1f\n 1:"); // 2 cycles
    else
        __asm__ __volatile__(
     3b4:	c0 e1       	ldi	r28, 0x10	; 16
     3b6:	d0 e0       	ldi	r29, 0x00	; 0
     3b8:	ce 01       	movw	r24, r28
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_init+0x56>
    /* repeat last command */
    lcd_e_toggle();
    delay(64); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     3be:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if (__count == 0)
        __asm__ __volatile__("rjmp 1f\n 1:"); // 2 cycles
    else
        __asm__ __volatile__(
     3c2:	ce 01       	movw	r24, r28
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <lcd_init+0x60>
    /* repeat last command a third time */
    lcd_e_toggle();
    delay(64); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    dataport &= ~_BV(LCD_DATA0_PIN);
     3c8:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
     3cc:	8f 7e       	andi	r24, 0xEF	; 239
     3ce:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
    pcf8574_setoutput(LCD_PCF8574_DEVICEID, dataport);
     3d2:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <__data_end>
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 be 05 	call	0xb7c	; 0xb7c <pcf8574_setoutput>
    lcd_e_toggle();
     3dc:	0e 94 c5 00 	call	0x18a	; 0x18a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if (__count == 0)
        __asm__ __volatile__("rjmp 1f\n 1:"); // 2 cycles
    else
        __asm__ __volatile__(
     3e0:	21 97       	sbiw	r28, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <lcd_init+0x7c>
    lcd_e_toggle();
    delay(64); /* some displays need this additional delay */

    /* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */

    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     3e4:	88 e2       	ldi	r24, 0x28	; 40
     3e6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>

    lcd_command(LCD_DISP_OFF);     /* display off                  */
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     3f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     3f4:	86 e0       	ldi	r24, 0x06	; 6
     3f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     3fa:	81 2f       	mov	r24, r17
     3fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <lcd_command>

} /* lcd_init */
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	08 95       	ret

00000408 <__vector_10>:
    }
    return 1;
}

ISR(TIMER1_CAPT_vect)
{
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	2f 93       	push	r18
     418:	3f 93       	push	r19
     41a:	4f 93       	push	r20
     41c:	5f 93       	push	r21
     41e:	6f 93       	push	r22
     420:	7f 93       	push	r23
     422:	8f 93       	push	r24
     424:	9f 93       	push	r25
     426:	af 93       	push	r26
     428:	bf 93       	push	r27
     42a:	ef 93       	push	r30
     42c:	ff 93       	push	r31
    static long temp = 0;
    if (TCCR1B & _BV(ICES1))
     42e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     432:	86 ff       	sbrs	r24, 6
     434:	0f c0       	rjmp	.+30     	; 0x454 <__vector_10+0x4c>
        temp = ICR1;
     436:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     43a:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <temp.2130>
     446:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <temp.2130+0x1>
     44a:	a0 93 a9 01 	sts	0x01A9, r26	; 0x8001a9 <temp.2130+0x2>
     44e:	b0 93 aa 01 	sts	0x01AA, r27	; 0x8001aa <temp.2130+0x3>
     452:	2f c0       	rjmp	.+94     	; 0x4b2 <__vector_10+0xaa>
    else
        dist = ((ICR1 - temp) * 1e6) / F_CPU / 5.8;
     454:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     458:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     45c:	cb 01       	movw	r24, r22
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	00 91 a7 01 	lds	r16, 0x01A7	; 0x8001a7 <temp.2130>
     466:	10 91 a8 01 	lds	r17, 0x01A8	; 0x8001a8 <temp.2130+0x1>
     46a:	20 91 a9 01 	lds	r18, 0x01A9	; 0x8001a9 <temp.2130+0x2>
     46e:	30 91 aa 01 	lds	r19, 0x01AA	; 0x8001aa <temp.2130+0x3>
     472:	bc 01       	movw	r22, r24
     474:	cd 01       	movw	r24, r26
     476:	60 1b       	sub	r22, r16
     478:	71 0b       	sbc	r23, r17
     47a:	82 0b       	sbc	r24, r18
     47c:	93 0b       	sbc	r25, r19
     47e:	0e 94 1f 08 	call	0x103e	; 0x103e <__floatsisf>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	34 e2       	ldi	r19, 0x24	; 36
     486:	44 e7       	ldi	r20, 0x74	; 116
     488:	59 e4       	ldi	r21, 0x49	; 73
     48a:	0e 94 ab 08 	call	0x1156	; 0x1156 <__mulsf3>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	34 e2       	ldi	r19, 0x24	; 36
     492:	44 e7       	ldi	r20, 0x74	; 116
     494:	5b e4       	ldi	r21, 0x4B	; 75
     496:	0e 94 75 07 	call	0xeea	; 0xeea <__divsf3>
     49a:	2a e9       	ldi	r18, 0x9A	; 154
     49c:	39 e9       	ldi	r19, 0x99	; 153
     49e:	49 eb       	ldi	r20, 0xB9	; 185
     4a0:	50 e4       	ldi	r21, 0x40	; 64
     4a2:	0e 94 75 07 	call	0xeea	; 0xeea <__divsf3>
     4a6:	0e 94 e7 07 	call	0xfce	; 0xfce <__fixsfsi>
     4aa:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <dist+0x1>
     4ae:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <dist>
    TCCR1B ^= _BV(ICES1);
     4b2:	e1 e8       	ldi	r30, 0x81	; 129
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	90 81       	ld	r25, Z
     4b8:	80 e4       	ldi	r24, 0x40	; 64
     4ba:	89 27       	eor	r24, r25
     4bc:	80 83       	st	Z, r24
}
     4be:	ff 91       	pop	r31
     4c0:	ef 91       	pop	r30
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	7f 91       	pop	r23
     4cc:	6f 91       	pop	r22
     4ce:	5f 91       	pop	r21
     4d0:	4f 91       	pop	r20
     4d2:	3f 91       	pop	r19
     4d4:	2f 91       	pop	r18
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	0f 90       	pop	r0
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	0f 90       	pop	r0
     4e0:	1f 90       	pop	r1
     4e2:	18 95       	reti

000004e4 <monta_mensagem>:

void monta_mensagem(char *mensagem)
{
     4e4:	ef 92       	push	r14
     4e6:	ff 92       	push	r15
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	a0 97       	sbiw	r28, 0x20	; 32
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	8c 01       	movw	r16, r24
    char aux[32] = "";
     502:	1a 82       	std	Y+2, r1	; 0x02
     504:	19 82       	std	Y+1, r1	; 0x01
     506:	fe 01       	movw	r30, r28
     508:	33 96       	adiw	r30, 0x03	; 3
     50a:	8e e1       	ldi	r24, 0x1E	; 30
     50c:	df 01       	movw	r26, r30
     50e:	1d 92       	st	X+, r1
     510:	8a 95       	dec	r24
     512:	e9 f7       	brne	.-6      	; 0x50e <monta_mensagem+0x2a>
    sprintf(aux, "Mx:%d.%d\rMn:%d.%d\nAtl:%d.%d\r", caixa.altura_max / 10, caixa.altura_max % 10, caixa.altura_min / 10, caixa.altura_min % 10, caixa.altura_atual / 10, caixa.altura_atual % 10);
     514:	a3 e3       	ldi	r26, 0x33	; 51
     516:	b2 e0       	ldi	r27, 0x02	; 2
     518:	16 96       	adiw	r26, 0x06	; 6
     51a:	ed 90       	ld	r14, X+
     51c:	fc 90       	ld	r15, X
     51e:	17 97       	sbiw	r26, 0x07	; 7
     520:	14 96       	adiw	r26, 0x04	; 4
     522:	ed 91       	ld	r30, X+
     524:	fc 91       	ld	r31, X
     526:	15 97       	sbiw	r26, 0x05	; 5
     528:	12 96       	adiw	r26, 0x02	; 2
     52a:	4d 91       	ld	r20, X+
     52c:	5c 91       	ld	r21, X
     52e:	13 97       	sbiw	r26, 0x03	; 3
     530:	97 01       	movw	r18, r14
     532:	ad ec       	ldi	r26, 0xCD	; 205
     534:	bc ec       	ldi	r27, 0xCC	; 204
     536:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     53a:	96 95       	lsr	r25
     53c:	87 95       	ror	r24
     53e:	96 95       	lsr	r25
     540:	87 95       	ror	r24
     542:	96 95       	lsr	r25
     544:	87 95       	ror	r24
     546:	9c 01       	movw	r18, r24
     548:	22 0f       	add	r18, r18
     54a:	33 1f       	adc	r19, r19
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	82 0f       	add	r24, r18
     55a:	93 1f       	adc	r25, r19
     55c:	97 01       	movw	r18, r14
     55e:	28 1b       	sub	r18, r24
     560:	39 0b       	sbc	r19, r25
     562:	c9 01       	movw	r24, r18
     564:	9f 93       	push	r25
     566:	2f 93       	push	r18
     568:	97 01       	movw	r18, r14
     56a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     56e:	96 95       	lsr	r25
     570:	87 95       	ror	r24
     572:	96 95       	lsr	r25
     574:	87 95       	ror	r24
     576:	96 95       	lsr	r25
     578:	87 95       	ror	r24
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	9f 01       	movw	r18, r30
     580:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     584:	96 95       	lsr	r25
     586:	87 95       	ror	r24
     588:	96 95       	lsr	r25
     58a:	87 95       	ror	r24
     58c:	96 95       	lsr	r25
     58e:	87 95       	ror	r24
     590:	9c 01       	movw	r18, r24
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	88 0f       	add	r24, r24
     59c:	99 1f       	adc	r25, r25
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	82 0f       	add	r24, r18
     5a4:	93 1f       	adc	r25, r19
     5a6:	df 01       	movw	r26, r30
     5a8:	a8 1b       	sub	r26, r24
     5aa:	b9 0b       	sbc	r27, r25
     5ac:	cd 01       	movw	r24, r26
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	9f 01       	movw	r18, r30
     5b4:	ad ec       	ldi	r26, 0xCD	; 205
     5b6:	bc ec       	ldi	r27, 0xCC	; 204
     5b8:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     5bc:	96 95       	lsr	r25
     5be:	87 95       	ror	r24
     5c0:	96 95       	lsr	r25
     5c2:	87 95       	ror	r24
     5c4:	96 95       	lsr	r25
     5c6:	87 95       	ror	r24
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	9a 01       	movw	r18, r20
     5ce:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     5d2:	96 95       	lsr	r25
     5d4:	87 95       	ror	r24
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	9c 01       	movw	r18, r24
     5e0:	22 0f       	add	r18, r18
     5e2:	33 1f       	adc	r19, r19
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	9a 01       	movw	r18, r20
     5f6:	28 1b       	sub	r18, r24
     5f8:	39 0b       	sbc	r19, r25
     5fa:	c9 01       	movw	r24, r18
     5fc:	9f 93       	push	r25
     5fe:	2f 93       	push	r18
     600:	9a 01       	movw	r18, r20
     602:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	7c 01       	movw	r14, r24
     624:	9f 93       	push	r25
     626:	8f 93       	push	r24
     628:	0e 94 69 09 	call	0x12d2	; 0x12d2 <sprintf>
    strcpy(mensagem, aux);
     62c:	b7 01       	movw	r22, r14
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 54 09 	call	0x12a8	; 0x12a8 <strcpy>

    if (encher)
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <encher>
     642:	88 23       	and	r24, r24
     644:	69 f0       	breq	.+26     	; 0x660 <monta_mensagem+0x17c>
        strcat(mensagem, " ON ");
     646:	d8 01       	movw	r26, r16
     648:	0d 90       	ld	r0, X+
     64a:	00 20       	and	r0, r0
     64c:	e9 f7       	brne	.-6      	; 0x648 <monta_mensagem+0x164>
     64e:	11 97       	sbiw	r26, 0x01	; 1
     650:	85 e0       	ldi	r24, 0x05	; 5
     652:	ee e1       	ldi	r30, 0x1E	; 30
     654:	f1 e0       	ldi	r31, 0x01	; 1
     656:	01 90       	ld	r0, Z+
     658:	0d 92       	st	X+, r0
     65a:	8a 95       	dec	r24
     65c:	e1 f7       	brne	.-8      	; 0x656 <monta_mensagem+0x172>
     65e:	0c c0       	rjmp	.+24     	; 0x678 <monta_mensagem+0x194>
    else
        strcat(mensagem, " OFF");
     660:	d8 01       	movw	r26, r16
     662:	0d 90       	ld	r0, X+
     664:	00 20       	and	r0, r0
     666:	e9 f7       	brne	.-6      	; 0x662 <monta_mensagem+0x17e>
     668:	11 97       	sbiw	r26, 0x01	; 1
     66a:	85 e0       	ldi	r24, 0x05	; 5
     66c:	e3 e2       	ldi	r30, 0x23	; 35
     66e:	f1 e0       	ldi	r31, 0x01	; 1
     670:	01 90       	ld	r0, Z+
     672:	0d 92       	st	X+, r0
     674:	8a 95       	dec	r24
     676:	e1 f7       	brne	.-8      	; 0x670 <monta_mensagem+0x18c>
}
     678:	a0 96       	adiw	r28, 0x20	; 32
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	f8 94       	cli
     67e:	de bf       	out	0x3e, r29	; 62
     680:	0f be       	out	0x3f, r0	; 63
     682:	cd bf       	out	0x3d, r28	; 61
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	ef 90       	pop	r14
     690:	08 95       	ret

00000692 <trata_mensagem>:

void trata_mensagem(char *mensagem)
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	fc 01       	movw	r30, r24
    caixa.altura_instalada = ((mensagem[3] - '0') * 100) + ((mensagem[4] - '0') * 10) + (mensagem[5] - '0');
     698:	23 81       	ldd	r18, Z+3	; 0x03
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	20 53       	subi	r18, 0x30	; 48
     69e:	31 09       	sbc	r19, r1
     6a0:	44 e6       	ldi	r20, 0x64	; 100
     6a2:	42 9f       	mul	r20, r18
     6a4:	b0 01       	movw	r22, r0
     6a6:	43 9f       	mul	r20, r19
     6a8:	70 0d       	add	r23, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	24 81       	ldd	r18, Z+4	; 0x04
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	c9 01       	movw	r24, r18
     6b2:	c0 97       	sbiw	r24, 0x30	; 48
     6b4:	dc 01       	movw	r26, r24
     6b6:	aa 0f       	add	r26, r26
     6b8:	bb 1f       	adc	r27, r27
     6ba:	9c 01       	movw	r18, r24
     6bc:	22 0f       	add	r18, r18
     6be:	33 1f       	adc	r19, r19
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	22 0f       	add	r18, r18
     6c6:	33 1f       	adc	r19, r19
     6c8:	cd 01       	movw	r24, r26
     6ca:	82 0f       	add	r24, r18
     6cc:	93 1f       	adc	r25, r19
     6ce:	86 0f       	add	r24, r22
     6d0:	97 1f       	adc	r25, r23
     6d2:	25 81       	ldd	r18, Z+5	; 0x05
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	20 53       	subi	r18, 0x30	; 48
     6d8:	31 09       	sbc	r19, r1
     6da:	82 0f       	add	r24, r18
     6dc:	93 1f       	adc	r25, r19
     6de:	a3 e3       	ldi	r26, 0x33	; 51
     6e0:	b2 e0       	ldi	r27, 0x02	; 2
     6e2:	11 96       	adiw	r26, 0x01	; 1
     6e4:	9c 93       	st	X, r25
     6e6:	8e 93       	st	-X, r24
    caixa.altura_max = ((mensagem[7] - '0') * 100) + ((mensagem[8] - '0') * 10) + (mensagem[9] - '0');
     6e8:	87 81       	ldd	r24, Z+7	; 0x07
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	c0 97       	sbiw	r24, 0x30	; 48
     6ee:	48 9f       	mul	r20, r24
     6f0:	b0 01       	movw	r22, r0
     6f2:	49 9f       	mul	r20, r25
     6f4:	70 0d       	add	r23, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	80 85       	ldd	r24, Z+8	; 0x08
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9c 01       	movw	r18, r24
     6fe:	20 53       	subi	r18, 0x30	; 48
     700:	31 09       	sbc	r19, r1
     702:	e9 01       	movw	r28, r18
     704:	cc 0f       	add	r28, r28
     706:	dd 1f       	adc	r29, r29
     708:	c9 01       	movw	r24, r18
     70a:	88 0f       	add	r24, r24
     70c:	99 1f       	adc	r25, r25
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	88 0f       	add	r24, r24
     714:	99 1f       	adc	r25, r25
     716:	9e 01       	movw	r18, r28
     718:	28 0f       	add	r18, r24
     71a:	39 1f       	adc	r19, r25
     71c:	26 0f       	add	r18, r22
     71e:	37 1f       	adc	r19, r23
     720:	81 85       	ldd	r24, Z+9	; 0x09
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	c0 97       	sbiw	r24, 0x30	; 48
     726:	28 0f       	add	r18, r24
     728:	39 1f       	adc	r19, r25
     72a:	13 96       	adiw	r26, 0x03	; 3
     72c:	3c 93       	st	X, r19
     72e:	2e 93       	st	-X, r18
     730:	12 97       	sbiw	r26, 0x02	; 2
    caixa.altura_min = ((mensagem[11] - '0') * 100) + ((mensagem[12] - '0') * 10) + (mensagem[13] - '0');
     732:	83 85       	ldd	r24, Z+11	; 0x0b
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	c0 97       	sbiw	r24, 0x30	; 48
     738:	48 9f       	mul	r20, r24
     73a:	b0 01       	movw	r22, r0
     73c:	49 9f       	mul	r20, r25
     73e:	70 0d       	add	r23, r0
     740:	11 24       	eor	r1, r1
     742:	44 85       	ldd	r20, Z+12	; 0x0c
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	9a 01       	movw	r18, r20
     748:	20 53       	subi	r18, 0x30	; 48
     74a:	31 09       	sbc	r19, r1
     74c:	c9 01       	movw	r24, r18
     74e:	88 0f       	add	r24, r24
     750:	99 1f       	adc	r25, r25
     752:	a9 01       	movw	r20, r18
     754:	44 0f       	add	r20, r20
     756:	55 1f       	adc	r21, r21
     758:	44 0f       	add	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	44 0f       	add	r20, r20
     75e:	55 1f       	adc	r21, r21
     760:	9c 01       	movw	r18, r24
     762:	24 0f       	add	r18, r20
     764:	35 1f       	adc	r19, r21
     766:	26 0f       	add	r18, r22
     768:	37 1f       	adc	r19, r23
     76a:	85 85       	ldd	r24, Z+13	; 0x0d
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	c0 97       	sbiw	r24, 0x30	; 48
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	15 96       	adiw	r26, 0x05	; 5
     776:	3c 93       	st	X, r19
     778:	2e 93       	st	-X, r18
     77a:	14 97       	sbiw	r26, 0x04	; 4
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <monta_resposta>:
void monta_resposta()
{
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	e2 97       	sbiw	r28, 0x32	; 50
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	de bf       	out	0x3e, r29	; 62
     796:	0f be       	out	0x3f, r0	; 63
     798:	cd bf       	out	0x3d, r28	; 61
    char resposta[50] = "";
     79a:	1a 82       	std	Y+2, r1	; 0x02
     79c:	19 82       	std	Y+1, r1	; 0x01
     79e:	fe 01       	movw	r30, r28
     7a0:	33 96       	adiw	r30, 0x03	; 3
     7a2:	80 e3       	ldi	r24, 0x30	; 48
     7a4:	df 01       	movw	r26, r30
     7a6:	1d 92       	st	X+, r1
     7a8:	8a 95       	dec	r24
     7aa:	e9 f7       	brne	.-6      	; 0x7a6 <monta_resposta+0x24>
    sprintf(resposta, "lr,%d,%d,%d,%d,\r\n", caixa.altura_instalada, caixa.altura_max, caixa.altura_min, caixa.altura_atual);
     7ac:	e3 e3       	ldi	r30, 0x33	; 51
     7ae:	f2 e0       	ldi	r31, 0x02	; 2
     7b0:	87 81       	ldd	r24, Z+7	; 0x07
     7b2:	8f 93       	push	r24
     7b4:	86 81       	ldd	r24, Z+6	; 0x06
     7b6:	8f 93       	push	r24
     7b8:	85 81       	ldd	r24, Z+5	; 0x05
     7ba:	8f 93       	push	r24
     7bc:	84 81       	ldd	r24, Z+4	; 0x04
     7be:	8f 93       	push	r24
     7c0:	83 81       	ldd	r24, Z+3	; 0x03
     7c2:	8f 93       	push	r24
     7c4:	82 81       	ldd	r24, Z+2	; 0x02
     7c6:	8f 93       	push	r24
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
     7ca:	8f 93       	push	r24
     7cc:	80 81       	ld	r24, Z
     7ce:	8f 93       	push	r24
     7d0:	88 e2       	ldi	r24, 0x28	; 40
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	8e 01       	movw	r16, r28
     7da:	0f 5f       	subi	r16, 0xFF	; 255
     7dc:	1f 4f       	sbci	r17, 0xFF	; 255
     7de:	1f 93       	push	r17
     7e0:	0f 93       	push	r16
     7e2:	0e 94 69 09 	call	0x12d2	; 0x12d2 <sprintf>
    uart_send_string(resposta);
     7e6:	c8 01       	movw	r24, r16
     7e8:	0e 94 11 07 	call	0xe22	; 0xe22 <uart_send_string>
}
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	e2 96       	adiw	r28, 0x32	; 50
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <bomba_state>:
    }
}

void bomba_state(bool state)
{
    if (state)
     80c:	88 23       	and	r24, r24
     80e:	21 f0       	breq	.+8      	; 0x818 <bomba_state+0xc>
        PORTD |= (1 << BOMBA); // Liga bomba
     810:	8b b1       	in	r24, 0x0b	; 11
     812:	80 68       	ori	r24, 0x80	; 128
     814:	8b b9       	out	0x0b, r24	; 11
     816:	08 95       	ret
    else
        PORTD &= ~(1 << BOMBA); // desliga bomba
     818:	8b b1       	in	r24, 0x0b	; 11
     81a:	8f 77       	andi	r24, 0x7F	; 127
     81c:	8b b9       	out	0x0b, r24	; 11
     81e:	08 95       	ret

00000820 <led_verde_state>:
}

void led_verde_state(bool state)
{
    if (state)
     820:	88 23       	and	r24, r24
     822:	21 f0       	breq	.+8      	; 0x82c <led_verde_state+0xc>
        PORTD |= (1 << LDVD); // Liga LED
     824:	8b b1       	in	r24, 0x0b	; 11
     826:	80 64       	ori	r24, 0x40	; 64
     828:	8b b9       	out	0x0b, r24	; 11
     82a:	08 95       	ret
    else
        PORTD &= ~(1 << LDVD); // Apaga LED
     82c:	8b b1       	in	r24, 0x0b	; 11
     82e:	8f 7b       	andi	r24, 0xBF	; 191
     830:	8b b9       	out	0x0b, r24	; 11
     832:	08 95       	ret

00000834 <led_vermelho_state>:
}

void led_vermelho_state(bool state)
{
    if (state)
     834:	88 23       	and	r24, r24
     836:	21 f0       	breq	.+8      	; 0x840 <led_vermelho_state+0xc>
        PORTD |= (1 << LDVM); // Liga LED
     838:	8b b1       	in	r24, 0x0b	; 11
     83a:	80 62       	ori	r24, 0x20	; 32
     83c:	8b b9       	out	0x0b, r24	; 11
     83e:	03 c0       	rjmp	.+6      	; 0x846 <led_vermelho_state+0x12>
    else
        PORTD &= ~(1 << LDVM); // Apaga LED
     840:	8b b1       	in	r24, 0x0b	; 11
     842:	8f 7d       	andi	r24, 0xDF	; 223
     844:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << LDVM);     // Apaga LED
     846:	8b b1       	in	r24, 0x0b	; 11
     848:	8f 7d       	andi	r24, 0xDF	; 223
     84a:	8b b9       	out	0x0b, r24	; 11
     84c:	08 95       	ret

0000084e <rotina_da_bomba>:
    uart_send_string(resposta);
}

void rotina_da_bomba()
{
    if (dist > 0) // Tentando limpas alguns ruidos de sinal
     84e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <dist>
     852:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <dist+0x1>
     856:	18 16       	cp	r1, r24
     858:	19 06       	cpc	r1, r25
     85a:	24 f4       	brge	.+8      	; 0x864 <rotina_da_bomba+0x16>
        caixa.altura_atual = (int16_t)dist;
     85c:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <caixa+0x7>
     860:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <caixa+0x6>

    if (caixa.altura_atual >= caixa.altura_max - 20) // Colocando um pouco de hysterese para dar tempo do MCU executar o comando e fehcar a bomba
     864:	e3 e3       	ldi	r30, 0x33	; 51
     866:	f2 e0       	ldi	r31, 0x02	; 2
     868:	26 81       	ldd	r18, Z+6	; 0x06
     86a:	37 81       	ldd	r19, Z+7	; 0x07
     86c:	82 81       	ldd	r24, Z+2	; 0x02
     86e:	93 81       	ldd	r25, Z+3	; 0x03
     870:	44 97       	sbiw	r24, 0x14	; 20
     872:	28 17       	cp	r18, r24
     874:	39 07       	cpc	r19, r25
     876:	60 f0       	brcs	.+24     	; 0x890 <rotina_da_bomba+0x42>
    {
        encher = false;
     878:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <encher>
        bomba_state(OFF);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 06 04 	call	0x80c	; 0x80c <bomba_state>
        led_verde_state(ON);
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 10 04 	call	0x820	; 0x820 <led_verde_state>
        led_vermelho_state(OFF);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	0e 94 1a 04 	call	0x834	; 0x834 <led_vermelho_state>
     88e:	08 95       	ret
    }
    else if (caixa.altura_atual <= caixa.altura_min || encher)
     890:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <caixa+0x4>
     894:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <caixa+0x5>
     898:	82 17       	cp	r24, r18
     89a:	93 07       	cpc	r25, r19
     89c:	20 f4       	brcc	.+8      	; 0x8a6 <rotina_da_bomba+0x58>
     89e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <encher>
     8a2:	88 23       	and	r24, r24
     8a4:	61 f0       	breq	.+24     	; 0x8be <rotina_da_bomba+0x70>
    {
        encher = true;
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <encher>
        bomba_state(ON);
     8ac:	0e 94 06 04 	call	0x80c	; 0x80c <bomba_state>
        led_verde_state(OFF);
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	0e 94 10 04 	call	0x820	; 0x820 <led_verde_state>
        led_vermelho_state(ON);
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	0e 94 1a 04 	call	0x834	; 0x834 <led_vermelho_state>
     8bc:	08 95       	ret
    }
    else
    {
        encher = false;
     8be:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <encher>
        bomba_state(OFF);
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 06 04 	call	0x80c	; 0x80c <bomba_state>
        led_verde_state(ON);
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	0e 94 10 04 	call	0x820	; 0x820 <led_verde_state>
        led_vermelho_state(OFF);
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 1a 04 	call	0x834	; 0x834 <led_vermelho_state>
     8d4:	08 95       	ret

000008d6 <main>:

bool encher = false;
int dist;

int main(void)
{
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	c3 55       	subi	r28, 0x53	; 83
     8e0:	d1 09       	sbc	r29, r1
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
    char mensagem_lcd[33] = " ";
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
     8f4:	fe 01       	movw	r30, r28
     8f6:	33 96       	adiw	r30, 0x03	; 3
     8f8:	8f e1       	ldi	r24, 0x1F	; 31
     8fa:	df 01       	movw	r26, r30
     8fc:	1d 92       	st	X+, r1
     8fe:	8a 95       	dec	r24
     900:	e9 f7       	brne	.-6      	; 0x8fc <main+0x26>
    /* configure timer1 in normal mode */
    TCCR1A = 0;
     902:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    /* configure icr on rising edge with noise filter */
    TCCR1B = _BV(ICES1) | _BV(ICNC1) | _BV(CS10);
     906:	81 ec       	ldi	r24, 0xC1	; 193
     908:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TIMSK1 = _BV(ICIE1);
     90c:	80 e2       	ldi	r24, 0x20	; 32
     90e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    // LED VERMELHO // LED VERDE   // BOMBA
    DDRD = _BV(BOMBA) | _BV(LDVD) | _BV(LDVM) | _BV(TRIGGER); // Configura Saida do LED e da Bomba
     912:	84 ee       	ldi	r24, 0xE4	; 228
     914:	8a b9       	out	0x0a, r24	; 10
    lcd_init(LCD_DISP_ON);
     916:	8c e0       	ldi	r24, 0x0C	; 12
     918:	0e 94 b2 01 	call	0x364	; 0x364 <lcd_init>
    lcd_puts("   Iniciando      Equipamento");
     91c:	8a e3       	ldi	r24, 0x3A	; 58
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     924:	bf ef       	ldi	r27, 0xFF	; 255
     926:	29 e6       	ldi	r18, 0x69	; 105
     928:	88 e1       	ldi	r24, 0x18	; 24
     92a:	b1 50       	subi	r27, 0x01	; 1
     92c:	20 40       	sbci	r18, 0x00	; 0
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	e1 f7       	brne	.-8      	; 0x92a <__stack+0x2b>
     932:	00 c0       	rjmp	.+0      	; 0x934 <__stack+0x35>
     934:	00 00       	nop
    _delay_ms(500); // busy wait, 500ms
    lcd_clrscr();
     936:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_clrscr>

    lcd_puts("  Lab:Sistemas    Embarcados");
     93a:	88 e5       	ldi	r24, 0x58	; 88
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_puts>
     942:	9f ef       	ldi	r25, 0xFF	; 255
     944:	a9 e6       	ldi	r26, 0x69	; 105
     946:	b8 e1       	ldi	r27, 0x18	; 24
     948:	91 50       	subi	r25, 0x01	; 1
     94a:	a0 40       	sbci	r26, 0x00	; 0
     94c:	b0 40       	sbci	r27, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0x49>
     950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0x53>
     952:	00 00       	nop
    _delay_ms(500); // busy wait, 500ms
    lcd_clrscr();
     954:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_clrscr>

    ler_informacoes_salvas(&caixa);
     958:	83 e3       	ldi	r24, 0x33	; 51
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <ler_informacoes_salvas>

    uart_init(BAUDRATE, OFF); // inicia a comunicação bluetooth com um ponteiro de flag para saber se chegou dado
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	60 e8       	ldi	r22, 0x80	; 128
     964:	75 e2       	ldi	r23, 0x25	; 37
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 d7 06 	call	0xdae	; 0xdae <uart_init>
    sei();
     96e:	78 94       	sei
    uart_send_string("Iniciando Bluetooth\n");
     970:	85 e7       	ldi	r24, 0x75	; 117
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 11 07 	call	0xe22	; 0xe22 <uart_send_string>
    while (1)
    {

        char mensagem_bluetooth[50] = ""; // Estou sempre zerando essa variavel
     978:	1b a2       	std	Y+35, r1	; 0x23
     97a:	1a a2       	std	Y+34, r1	; 0x22
     97c:	fe 01       	movw	r30, r28
     97e:	b4 96       	adiw	r30, 0x24	; 36
     980:	80 e3       	ldi	r24, 0x30	; 48
     982:	df 01       	movw	r26, r30
     984:	1d 92       	st	X+, r1
     986:	8a 95       	dec	r24
     988:	e9 f7       	brne	.-6      	; 0x984 <__stack+0x85>
        char resposta[50] = "";

        PORTD |= _BV(TRIGGER);
     98a:	8b b1       	in	r24, 0x0b	; 11
     98c:	84 60       	ori	r24, 0x04	; 4
     98e:	8b b9       	out	0x0b, r24	; 11
     990:	8f e3       	ldi	r24, 0x3F	; 63
     992:	9c e9       	ldi	r25, 0x9C	; 156
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <__stack+0x95>
     998:	00 c0       	rjmp	.+0      	; 0x99a <__stack+0x9b>
     99a:	00 00       	nop
        _delay_ms(10);
        PORTD &= ~_BV(TRIGGER);
     99c:	8b b1       	in	r24, 0x0b	; 11
     99e:	8b 7f       	andi	r24, 0xFB	; 251
     9a0:	8b b9       	out	0x0b, r24	; 11

        rotina_da_bomba();
     9a2:	0e 94 27 04 	call	0x84e	; 0x84e <rotina_da_bomba>

        if (uart_read_count()) // Chegou mensagem Bluetooth
     9a6:	0e 94 2a 07 	call	0xe54	; 0xe54 <uart_read_count>
     9aa:	89 2b       	or	r24, r25
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <__stack+0xb1>
     9ae:	41 c0       	rjmp	.+130    	; 0xa32 <__stack+0x133>
        {
            uart_get_string(&mensagem_bluetooth);
     9b0:	ce 01       	movw	r24, r28
     9b2:	82 96       	adiw	r24, 0x22	; 34
     9b4:	0e 94 4f 07 	call	0xe9e	; 0xe9e <uart_get_string>
            if (!(strncmp(mensagem_bluetooth, "ev", 2)))
     9b8:	42 e0       	ldi	r20, 0x02	; 2
     9ba:	50 e0       	ldi	r21, 0x00	; 0
     9bc:	6a e8       	ldi	r22, 0x8A	; 138
     9be:	71 e0       	ldi	r23, 0x01	; 1
     9c0:	ce 01       	movw	r24, r28
     9c2:	82 96       	adiw	r24, 0x22	; 34
     9c4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncmp>
     9c8:	89 2b       	or	r24, r25
     9ca:	69 f4       	brne	.+26     	; 0x9e6 <__stack+0xe7>
            { // Chegou mensagem_bluetooth de configuração
                trata_mensagem(&mensagem_bluetooth);
     9cc:	ce 01       	movw	r24, r28
     9ce:	82 96       	adiw	r24, 0x22	; 34
     9d0:	0e 94 49 03 	call	0x692	; 0x692 <trata_mensagem>
                salva_informacoes(&caixa);
     9d4:	83 e3       	ldi	r24, 0x33	; 51
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	0e 94 89 05 	call	0xb12	; 0xb12 <salva_informacoes>
                uart_send_string("evok\n");
     9dc:	8d e8       	ldi	r24, 0x8D	; 141
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	0e 94 11 07 	call	0xe22	; 0xe22 <uart_send_string>
     9e4:	26 c0       	rjmp	.+76     	; 0xa32 <__stack+0x133>
            }
            else if (!(strncmp(mensagem_bluetooth, "lr", 2)))
     9e6:	42 e0       	ldi	r20, 0x02	; 2
     9e8:	50 e0       	ldi	r21, 0x00	; 0
     9ea:	63 e9       	ldi	r22, 0x93	; 147
     9ec:	71 e0       	ldi	r23, 0x01	; 1
     9ee:	ce 01       	movw	r24, r28
     9f0:	82 96       	adiw	r24, 0x22	; 34
     9f2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncmp>
     9f6:	89 2b       	or	r24, r25
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__stack+0x101>
            { // Chegou mensagem_bluetooth para ler as configurações
                monta_resposta();
     9fa:	0e 94 c1 03 	call	0x782	; 0x782 <monta_resposta>
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <__stack+0x133>
            }
            else if (!(strncmp(mensagem_bluetooth, "bb", 2)))
     a00:	42 e0       	ldi	r20, 0x02	; 2
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	66 e9       	ldi	r22, 0x96	; 150
     a06:	71 e0       	ldi	r23, 0x01	; 1
     a08:	ce 01       	movw	r24, r28
     a0a:	82 96       	adiw	r24, 0x22	; 34
     a0c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <strncmp>
     a10:	89 2b       	or	r24, r25
     a12:	59 f4       	brne	.+22     	; 0xa2a <__stack+0x12b>
            { // Chegou mensagem_bluetooth para mudar o estado da bomba
                encher = !encher;
     a14:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <encher>
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	89 27       	eor	r24, r25
     a1c:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <encher>
                uart_send_string("bbok\n");
     a20:	89 e9       	ldi	r24, 0x99	; 153
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	0e 94 11 07 	call	0xe22	; 0xe22 <uart_send_string>
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x133>
            }
            else
            {
                uart_send_string("error\n");
     a2a:	8f e9       	ldi	r24, 0x9F	; 159
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	0e 94 11 07 	call	0xe22	; 0xe22 <uart_send_string>
            }
        }

        monta_mensagem(&mensagem_lcd); // Montando  que será exibida no LCD
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	0e 94 72 02 	call	0x4e4	; 0x4e4 <monta_mensagem>
        lcd_clrscr();
     a3a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_clrscr>
        lcd_puts(mensagem_lcd);
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	0e 94 a3 01 	call	0x346	; 0x346 <lcd_puts>
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	a9 e6       	ldi	r26, 0x69	; 105
     a4a:	b8 e1       	ldi	r27, 0x18	; 24
     a4c:	91 50       	subi	r25, 0x01	; 1
     a4e:	a0 40       	sbci	r26, 0x00	; 0
     a50:	b0 40       	sbci	r27, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <__stack+0x14d>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <__stack+0x157>
     a56:	00 00       	nop

        _delay_ms(500); // busy wait, 500ms
    }
     a58:	8f cf       	rjmp	.-226    	; 0x978 <__stack+0x79>

00000a5a <ler_informacoes_salvas>:

#include <avr/eeprom.h>
#include "memoria.h"

void ler_informacoes_salvas(caixa_dagua *informacoes)
{
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	7c 01       	movw	r14, r24
    informacoes->altura_max = eeprom_read_byte((uint8_t *)ALTMAX0) << 8 | eeprom_read_byte((uint8_t *)ALTMAX1);
     a6c:	80 e3       	ldi	r24, 0x30	; 48
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     a74:	c8 2f       	mov	r28, r24
     a76:	d0 e0       	ldi	r29, 0x00	; 0
     a78:	dc 2f       	mov	r29, r28
     a7a:	cc 27       	eor	r28, r28
     a7c:	81 e3       	ldi	r24, 0x31	; 49
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     a84:	c8 2b       	or	r28, r24
     a86:	f7 01       	movw	r30, r14
     a88:	d3 83       	std	Z+3, r29	; 0x03
     a8a:	c2 83       	std	Z+2, r28	; 0x02
    informacoes->altura_min = eeprom_read_byte((uint8_t *)ALTMIN0) << 8 | eeprom_read_byte((uint8_t *)ALTMIN1);
     a8c:	82 e3       	ldi	r24, 0x32	; 50
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	18 2f       	mov	r17, r24
     a98:	00 27       	eor	r16, r16
     a9a:	83 e3       	ldi	r24, 0x33	; 51
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     aa2:	98 01       	movw	r18, r16
     aa4:	28 2b       	or	r18, r24
     aa6:	c9 01       	movw	r24, r18
     aa8:	6c 01       	movw	r12, r24
     aaa:	f7 01       	movw	r30, r14
     aac:	95 83       	std	Z+5, r25	; 0x05
     aae:	84 83       	std	Z+4, r24	; 0x04
    informacoes->altura_instalada = eeprom_read_byte((uint8_t *)ALTINST0) << 8 | eeprom_read_byte((uint8_t *)ALTINST1);
     ab0:	84 e3       	ldi	r24, 0x34	; 52
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	18 2f       	mov	r17, r24
     abc:	00 27       	eor	r16, r16
     abe:	85 e3       	ldi	r24, 0x35	; 53
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <eeprom_read_byte>
     ac6:	98 01       	movw	r18, r16
     ac8:	28 2b       	or	r18, r24
     aca:	c9 01       	movw	r24, r18
     acc:	f7 01       	movw	r30, r14
     ace:	91 83       	std	Z+1, r25	; 0x01
     ad0:	80 83       	st	Z, r24
    if (informacoes->altura_max == 0xffff)
     ad2:	21 96       	adiw	r28, 0x01	; 1
     ad4:	29 f4       	brne	.+10     	; 0xae0 <ler_informacoes_salvas+0x86>
        informacoes->altura_max = ALTURA_DEFAULT;
     ad6:	8a ef       	ldi	r24, 0xFA	; 250
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	f7 01       	movw	r30, r14
     adc:	93 83       	std	Z+3, r25	; 0x03
     ade:	82 83       	std	Z+2, r24	; 0x02
    if (informacoes->altura_min == 0xffff)
     ae0:	cd 20       	and	r12, r13
     ae2:	c0 94       	com	r12
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <ler_informacoes_salvas+0x96>
        informacoes->altura_min = MAX_DEFAULT;
     ae6:	84 eb       	ldi	r24, 0xB4	; 180
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	f7 01       	movw	r30, r14
     aec:	95 83       	std	Z+5, r25	; 0x05
     aee:	84 83       	std	Z+4, r24	; 0x04
    if (informacoes->altura_instalada == 0xffff)
     af0:	2f 3f       	cpi	r18, 0xFF	; 255
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	29 f4       	brne	.+10     	; 0xb00 <ler_informacoes_salvas+0xa6>
        informacoes->altura_instalada = MIN_DEFAULT;
     af6:	84 e6       	ldi	r24, 0x64	; 100
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	f7 01       	movw	r30, r14
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24

}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <salva_informacoes>:

void salva_informacoes(caixa_dagua *informacoes)
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	ec 01       	movw	r28, r24
    eeprom_write_byte((uint8_t *)ALTMAX0, ((uint16_t)informacoes->altura_max >> 8) & 0xff);
     b18:	6b 81       	ldd	r22, Y+3	; 0x03
     b1a:	80 e3       	ldi	r24, 0x30	; 48
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>
    eeprom_write_byte((uint8_t *)ALTMAX1, (uint16_t)informacoes->altura_max & 0xff);
     b22:	6a 81       	ldd	r22, Y+2	; 0x02
     b24:	81 e3       	ldi	r24, 0x31	; 49
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>

    eeprom_write_byte((uint8_t *)ALTMIN0, ((uint16_t)informacoes->altura_min >> 8) & 0xff);
     b2c:	6d 81       	ldd	r22, Y+5	; 0x05
     b2e:	82 e3       	ldi	r24, 0x32	; 50
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>
    eeprom_write_byte((uint8_t *)ALTMIN1, (uint16_t)informacoes->altura_min & 0xff);
     b36:	6c 81       	ldd	r22, Y+4	; 0x04
     b38:	83 e3       	ldi	r24, 0x33	; 51
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>

    eeprom_write_byte((uint8_t *)ALTINST0, ((uint16_t)informacoes->altura_instalada >> 8) & 0xff);
     b40:	69 81       	ldd	r22, Y+1	; 0x01
     b42:	84 e3       	ldi	r24, 0x34	; 52
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>
    eeprom_write_byte((uint8_t *)ALTINST1, (uint16_t)informacoes->altura_instalada & 0xff);
     b4a:	68 81       	ld	r22, Y
     b4c:	85 e3       	ldi	r24, 0x35	; 53
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	0e 94 24 0c 	call	0x1848	; 0x1848 <eeprom_write_byte>
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <pcf8574_init>:
		i2c_write(b);
		i2c_stop();
		return 0;
	}
	return -1;
}
     b5a:	0e 94 40 06 	call	0xc80	; 0xc80 <i2c_init>
     b5e:	85 e3       	ldi	r24, 0x35	; 53
     b60:	8a 95       	dec	r24
     b62:	f1 f7       	brne	.-4      	; 0xb60 <pcf8574_init+0x6>
     b64:	00 00       	nop
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <pcf8574_init+0x1c>
     b6a:	e8 2f       	mov	r30, r24
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	ee 5c       	subi	r30, 0xCE	; 206
     b70:	fd 4f       	sbci	r31, 0xFD	; 253
     b72:	10 82       	st	Z, r1
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	88 23       	and	r24, r24
     b78:	c1 f3       	breq	.-16     	; 0xb6a <pcf8574_init+0x10>
     b7a:	08 95       	ret

00000b7c <pcf8574_setoutput>:
     b7c:	cf 93       	push	r28
     b7e:	81 11       	cpse	r24, r1
     b80:	11 c0       	rjmp	.+34     	; 0xba4 <pcf8574_setoutput+0x28>
     b82:	c6 2f       	mov	r28, r22
     b84:	e8 2f       	mov	r30, r24
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	ee 5c       	subi	r30, 0xCE	; 206
     b8a:	fd 4f       	sbci	r31, 0xFD	; 253
     b8c:	60 83       	st	Z, r22
     b8e:	89 5d       	subi	r24, 0xD9	; 217
     b90:	88 0f       	add	r24, r24
     b92:	0e 94 46 06 	call	0xc8c	; 0xc8c <i2c_start>
     b96:	8c 2f       	mov	r24, r28
     b98:	0e 94 74 06 	call	0xce8	; 0xce8 <i2c_write>
     b9c:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <i2c_stop>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <pcf8574_setoutput+0x2a>
     ba4:	8f ef       	ldi	r24, 0xFF	; 255
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <pcf8574_setoutputpin>:

/*
 * set output pin
 */
int8_t pcf8574_setoutputpin(uint8_t deviceid, uint8_t pin, uint8_t data)
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
	if ((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS))
     bae:	81 11       	cpse	r24, r1
     bb0:	2b c0       	rjmp	.+86     	; 0xc08 <pcf8574_setoutputpin+0x5e>
     bb2:	68 30       	cpi	r22, 0x08	; 8
     bb4:	58 f5       	brcc	.+86     	; 0xc0c <pcf8574_setoutputpin+0x62>
	{
		uint8_t b = 0;
		b = pcf8574_pinstatus[deviceid];
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	f9 01       	movw	r30, r18
     bbc:	ee 5c       	subi	r30, 0xCE	; 206
     bbe:	fd 4f       	sbci	r31, 0xFD	; 253
     bc0:	90 81       	ld	r25, Z
		b = (data != 0) ? (b | (1 << pin)) : (b & ~(1 << pin));
     bc2:	44 23       	and	r20, r20
     bc4:	49 f0       	breq	.+18     	; 0xbd8 <pcf8574_setoutputpin+0x2e>
     bc6:	c1 e0       	ldi	r28, 0x01	; 1
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <pcf8574_setoutputpin+0x26>
     bcc:	cc 0f       	add	r28, r28
     bce:	dd 1f       	adc	r29, r29
     bd0:	6a 95       	dec	r22
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <pcf8574_setoutputpin+0x22>
     bd4:	c9 2b       	or	r28, r25
     bd6:	09 c0       	rjmp	.+18     	; 0xbea <pcf8574_setoutputpin+0x40>
     bd8:	c1 e0       	ldi	r28, 0x01	; 1
     bda:	d0 e0       	ldi	r29, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <pcf8574_setoutputpin+0x38>
     bde:	cc 0f       	add	r28, r28
     be0:	dd 1f       	adc	r29, r29
     be2:	6a 95       	dec	r22
     be4:	e2 f7       	brpl	.-8      	; 0xbde <pcf8574_setoutputpin+0x34>
     be6:	c0 95       	com	r28
     be8:	c9 23       	and	r28, r25
		pcf8574_pinstatus[deviceid] = b;
     bea:	f9 01       	movw	r30, r18
     bec:	ee 5c       	subi	r30, 0xCE	; 206
     bee:	fd 4f       	sbci	r31, 0xFD	; 253
     bf0:	c0 83       	st	Z, r28
		//update device
		i2c_start(((PCF8574_ADDRBASE + deviceid) << 1) | I2C_WRITE);
     bf2:	89 5d       	subi	r24, 0xD9	; 217
     bf4:	88 0f       	add	r24, r24
     bf6:	0e 94 46 06 	call	0xc8c	; 0xc8c <i2c_start>
		i2c_write(b);
     bfa:	8c 2f       	mov	r24, r28
     bfc:	0e 94 74 06 	call	0xce8	; 0xce8 <i2c_write>
		i2c_stop();
     c00:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <i2c_stop>
		return 0;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	03 c0       	rjmp	.+6      	; 0xc0e <pcf8574_setoutputpin+0x64>
	}
	return -1;
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <pcf8574_setoutputpin+0x64>
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <pcf8574_setoutputpinhigh>:
/*
 * set output pin high
 */
int8_t pcf8574_setoutputpinhigh(uint8_t deviceid, uint8_t pin)
{
	return pcf8574_setoutputpin(deviceid, pin, 1);
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pcf8574_setoutputpin>
}
     c1a:	08 95       	ret

00000c1c <pcf8574_setoutputpinlow>:
/*
 * set output pin low
 */
int8_t pcf8574_setoutputpinlow(uint8_t deviceid, uint8_t pin)
{
	return pcf8574_setoutputpin(deviceid, pin, 0);
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <pcf8574_setoutputpin>
}
     c22:	08 95       	ret

00000c24 <pcf8574_getinput>:

/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid)
{
     c24:	cf 93       	push	r28
	int8_t data = -1;
	if ((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES))
     c26:	81 11       	cpse	r24, r1
     c28:	0e c0       	rjmp	.+28     	; 0xc46 <pcf8574_getinput+0x22>
	{
		i2c_start(((PCF8574_ADDRBASE + deviceid) << 1) | I2C_READ);
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	87 96       	adiw	r24, 0x27	; 39
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	81 60       	ori	r24, 0x01	; 1
     c34:	0e 94 46 06 	call	0xc8c	; 0xc8c <i2c_start>
		data = ~i2c_readNak();
     c38:	0e 94 86 06 	call	0xd0c	; 0xd0c <i2c_readNak>
     c3c:	c8 2f       	mov	r28, r24
     c3e:	c0 95       	com	r28
		i2c_stop();
     c40:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <i2c_stop>
     c44:	01 c0       	rjmp	.+2      	; 0xc48 <pcf8574_getinput+0x24>
/*
 * get input data
 */
int8_t pcf8574_getinput(uint8_t deviceid)
{
	int8_t data = -1;
     c46:	cf ef       	ldi	r28, 0xFF	; 255
		i2c_start(((PCF8574_ADDRBASE + deviceid) << 1) | I2C_READ);
		data = ~i2c_readNak();
		i2c_stop();
	}
	return data;
}
     c48:	8c 2f       	mov	r24, r28
     c4a:	cf 91       	pop	r28
     c4c:	08 95       	ret

00000c4e <pcf8574_getinputpin>:

/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin)
{
     c4e:	cf 93       	push	r28
	int8_t data = -1;
	if ((deviceid >= 0 && deviceid < PCF8574_MAXDEVICES) && (pin >= 0 && pin < PCF8574_MAXPINS))
     c50:	81 11       	cpse	r24, r1
     c52:	11 c0       	rjmp	.+34     	; 0xc76 <pcf8574_getinputpin+0x28>
     c54:	68 30       	cpi	r22, 0x08	; 8
     c56:	88 f4       	brcc	.+34     	; 0xc7a <pcf8574_getinputpin+0x2c>
     c58:	c6 2f       	mov	r28, r22
	{
		data = pcf8574_getinput(deviceid);
     c5a:	0e 94 12 06 	call	0xc24	; 0xc24 <pcf8574_getinput>
		if (data != -1)
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	69 f0       	breq	.+26     	; 0xc7c <pcf8574_getinputpin+0x2e>
		{
			data = (data >> pin) & 0b00000001;
     c62:	08 2e       	mov	r0, r24
     c64:	00 0c       	add	r0, r0
     c66:	99 0b       	sbc	r25, r25
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <pcf8574_getinputpin+0x20>
     c6a:	95 95       	asr	r25
     c6c:	87 95       	ror	r24
     c6e:	ca 95       	dec	r28
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <pcf8574_getinputpin+0x1c>
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	03 c0       	rjmp	.+6      	; 0xc7c <pcf8574_getinputpin+0x2e>
/*
 * get input pin (up or low)
 */
int8_t pcf8574_getinputpin(uint8_t deviceid, uint8_t pin)
{
	int8_t data = -1;
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <pcf8574_getinputpin+0x2e>
     c7a:	8f ef       	ldi	r24, 0xFF	; 255
		{
			data = (data >> pin) & 0b00000001;
		}
	}
	return data;
}
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <i2c_init>:
	while (!(TWCR & (1 << TWINT)))
		;

	return TWDR;

} /* i2c_readAck */
     c80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c84:	88 e1       	ldi	r24, 0x18	; 24
     c86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     c8a:	08 95       	ret

00000c8c <i2c_start>:
     c8c:	94 ea       	ldi	r25, 0xA4	; 164
     c8e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c92:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     c96:	99 23       	and	r25, r25
     c98:	e4 f7       	brge	.-8      	; 0xc92 <i2c_start+0x6>
     c9a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     c9e:	98 7f       	andi	r25, 0xF8	; 248
     ca0:	98 30       	cpi	r25, 0x08	; 8
     ca2:	11 f0       	breq	.+4      	; 0xca8 <i2c_start+0x1c>
     ca4:	90 31       	cpi	r25, 0x10	; 16
     ca6:	91 f4       	brne	.+36     	; 0xccc <i2c_start+0x40>
     ca8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     cac:	84 e8       	ldi	r24, 0x84	; 132
     cae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cb2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cb6:	88 23       	and	r24, r24
     cb8:	e4 f7       	brge	.-8      	; 0xcb2 <i2c_start+0x26>
     cba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     cbe:	88 7f       	andi	r24, 0xF8	; 248
     cc0:	88 31       	cpi	r24, 0x18	; 24
     cc2:	31 f0       	breq	.+12     	; 0xcd0 <i2c_start+0x44>
     cc4:	80 34       	cpi	r24, 0x40	; 64
     cc6:	31 f4       	brne	.+12     	; 0xcd4 <i2c_start+0x48>
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	08 95       	ret
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	08 95       	ret
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	08 95       	ret

00000cd8 <i2c_stop>:
     cd8:	84 e9       	ldi	r24, 0x94	; 148
     cda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cde:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ce2:	84 fd       	sbrc	r24, 4
     ce4:	fc cf       	rjmp	.-8      	; 0xcde <i2c_stop+0x6>
     ce6:	08 95       	ret

00000ce8 <i2c_write>:
     ce8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     cec:	84 e8       	ldi	r24, 0x84	; 132
     cee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cf2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     cf6:	88 23       	and	r24, r24
     cf8:	e4 f7       	brge	.-8      	; 0xcf2 <i2c_write+0xa>
     cfa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     cfe:	88 7f       	andi	r24, 0xF8	; 248
     d00:	88 32       	cpi	r24, 0x28	; 40
     d02:	11 f0       	breq	.+4      	; 0xd08 <i2c_write+0x20>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	08 95       	ret

00000d0c <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN);
     d0c:	84 e8       	ldi	r24, 0x84	; 132
     d0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT)))
     d12:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d16:	88 23       	and	r24, r24
     d18:	e4 f7       	brge	.-8      	; 0xd12 <i2c_readNak+0x6>
		;

	return TWDR;
     d1a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

} /* i2c_readNak */
     d1e:	08 95       	ret

00000d20 <__vector_18>:
{
	for (uint16_t i = 0; i < len; i++)
	{
		uart_send_byte(c[i]);
	}
}
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <rx_write_pos.1752>
     d36:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <rx_write_pos.1752+0x1>
     d3a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d3e:	ee 54       	subi	r30, 0x4E	; 78
     d40:	fe 4f       	sbci	r31, 0xFE	; 254
     d42:	80 83       	st	Z, r24
     d44:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rx_count>
     d48:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <rx_count+0x1>
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <rx_count+0x1>
     d52:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <rx_count>
     d56:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <rx_write_pos.1752>
     d5a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <rx_write_pos.1752+0x1>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <rx_write_pos.1752+0x1>
     d64:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <rx_write_pos.1752>
     d68:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <rx_write_pos.1752>
     d6c:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <rx_write_pos.1752+0x1>
     d70:	80 38       	cpi	r24, 0x80	; 128
     d72:	91 05       	cpc	r25, r1
     d74:	20 f0       	brcs	.+8      	; 0xd7e <__vector_18+0x5e>
     d76:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <rx_write_pos.1752+0x1>
     d7a:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <rx_write_pos.1752>
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	9f 91       	pop	r25
     d84:	8f 91       	pop	r24
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_20>:
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	8f 93       	push	r24
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     da2:	8f 91       	pop	r24
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <uart_init>:
     dae:	44 23       	and	r20, r20
     db0:	39 f0       	breq	.+14     	; 0xdc0 <uart_init+0x12>
     db2:	e0 ec       	ldi	r30, 0xC0	; 192
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	20 81       	ld	r18, Z
     db8:	22 60       	ori	r18, 0x02	; 2
     dba:	20 83       	st	Z, r18
     dbc:	a8 e0       	ldi	r26, 0x08	; 8
     dbe:	01 c0       	rjmp	.+2      	; 0xdc2 <uart_init+0x14>
     dc0:	a0 e1       	ldi	r26, 0x10	; 16
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	0e 94 49 09 	call	0x1292	; 0x1292 <__muluhisi3>
     dcc:	9b 01       	movw	r18, r22
     dce:	ac 01       	movw	r20, r24
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	74 e2       	ldi	r23, 0x24	; 36
     dd4:	84 ef       	ldi	r24, 0xF4	; 244
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 18 09 	call	0x1230	; 0x1230 <__udivmodsi4>
     ddc:	ba 01       	movw	r22, r20
     dde:	a9 01       	movw	r20, r18
     de0:	41 50       	subi	r20, 0x01	; 1
     de2:	51 09       	sbc	r21, r1
     de4:	61 09       	sbc	r22, r1
     de6:	71 09       	sbc	r23, r1
     de8:	db 01       	movw	r26, r22
     dea:	ca 01       	movw	r24, r20
     dec:	88 27       	eor	r24, r24
     dee:	9f 70       	andi	r25, 0x0F	; 15
     df0:	aa 27       	eor	r26, r26
     df2:	bb 27       	eor	r27, r27
     df4:	89 2f       	mov	r24, r25
     df6:	9a 2f       	mov	r25, r26
     df8:	ab 2f       	mov	r26, r27
     dfa:	bb 27       	eor	r27, r27
     dfc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e00:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     e04:	e1 ec       	ldi	r30, 0xC1	; 193
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	80 81       	ld	r24, Z
     e0a:	88 6d       	ori	r24, 0xD8	; 216
     e0c:	80 83       	st	Z, r24
     e0e:	08 95       	ret

00000e10 <uart_send_byte>:
     e10:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e14:	99 23       	and	r25, r25
     e16:	e1 f3       	breq	.-8      	; 0xe10 <uart_send_byte>
     e18:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     e1c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e20:	08 95       	ret

00000e22 <uart_send_string>:

void uart_send_string(uint8_t *c)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	8c 01       	movw	r16, r24
	uint16_t i = 0;
     e2c:	c0 e0       	ldi	r28, 0x00	; 0
     e2e:	d0 e0       	ldi	r29, 0x00	; 0
	do
	{
		uart_send_byte(c[i]);
     e30:	f8 01       	movw	r30, r16
     e32:	ec 0f       	add	r30, r28
     e34:	fd 1f       	adc	r31, r29
     e36:	80 81       	ld	r24, Z
     e38:	0e 94 08 07 	call	0xe10	; 0xe10 <uart_send_byte>
		i++;
     e3c:	21 96       	adiw	r28, 0x01	; 1

	} while (c[i] != '\0');
     e3e:	f8 01       	movw	r30, r16
     e40:	ec 0f       	add	r30, r28
     e42:	fd 1f       	adc	r31, r29
     e44:	80 81       	ld	r24, Z
     e46:	81 11       	cpse	r24, r1
     e48:	f3 cf       	rjmp	.-26     	; 0xe30 <uart_send_string+0xe>
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <uart_read_count>:
	}
}

uint16_t uart_read_count(void)
{
	return rx_count;
     e54:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <rx_count>
     e58:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <rx_count+0x1>
}
     e5c:	08 95       	ret

00000e5e <uart_read>:
uint8_t uart_read(void)
{
	static uint16_t rx_read_pos = 0;
	uint8_t data = 0;

	data = rx_buffer[rx_read_pos];
     e5e:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <rx_read_pos.1797>
     e62:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <rx_read_pos.1797+0x1>
     e66:	f9 01       	movw	r30, r18
     e68:	ee 54       	subi	r30, 0x4E	; 78
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	80 81       	ld	r24, Z
	rx_read_pos++;
     e6e:	2f 5f       	subi	r18, 0xFF	; 255
     e70:	3f 4f       	sbci	r19, 0xFF	; 255
     e72:	30 93 ad 01 	sts	0x01AD, r19	; 0x8001ad <rx_read_pos.1797+0x1>
     e76:	20 93 ac 01 	sts	0x01AC, r18	; 0x8001ac <rx_read_pos.1797>
	rx_count--;
     e7a:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <rx_count>
     e7e:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <rx_count+0x1>
     e82:	41 50       	subi	r20, 0x01	; 1
     e84:	51 09       	sbc	r21, r1
     e86:	50 93 b1 01 	sts	0x01B1, r21	; 0x8001b1 <rx_count+0x1>
     e8a:	40 93 b0 01 	sts	0x01B0, r20	; 0x8001b0 <rx_count>
	if (rx_read_pos >= RX_BUFFER_SIZE)
     e8e:	20 38       	cpi	r18, 0x80	; 128
     e90:	31 05       	cpc	r19, r1
     e92:	20 f0       	brcs	.+8      	; 0xe9c <uart_read+0x3e>
	{
		rx_read_pos = 0;
     e94:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <rx_read_pos.1797+0x1>
     e98:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <rx_read_pos.1797>
	}
	return data;
}
     e9c:	08 95       	ret

00000e9e <uart_get_string>:

	} while (c[i] != '\0');
}

void uart_get_string(uint8_t *c)
{
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	1f 93       	push	r17
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	7c 01       	movw	r14, r24
	uint16_t i = 0;
     eac:	c0 e0       	ldi	r28, 0x00	; 0
     eae:	d0 e0       	ldi	r29, 0x00	; 0
	char teste[20] = "APENAS TESTES \r\n";
	while (uart_read_count())
     eb0:	11 c0       	rjmp	.+34     	; 0xed4 <uart_get_string+0x36>
	{
		c[i] = uart_read();
     eb2:	87 01       	movw	r16, r14
     eb4:	0c 0f       	add	r16, r28
     eb6:	1d 1f       	adc	r17, r29
     eb8:	0e 94 2f 07 	call	0xe5e	; 0xe5e <uart_read>
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 83       	st	Z, r24
		i++;
     ec0:	21 96       	adiw	r28, 0x01	; 1
     ec2:	ff ef       	ldi	r31, 0xFF	; 255
     ec4:	21 ee       	ldi	r18, 0xE1	; 225
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	f1 50       	subi	r31, 0x01	; 1
     eca:	20 40       	sbci	r18, 0x00	; 0
     ecc:	80 40       	sbci	r24, 0x00	; 0
     ece:	e1 f7       	brne	.-8      	; 0xec8 <uart_get_string+0x2a>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <uart_get_string+0x34>
     ed2:	00 00       	nop

void uart_get_string(uint8_t *c)
{
	uint16_t i = 0;
	char teste[20] = "APENAS TESTES \r\n";
	while (uart_read_count())
     ed4:	0e 94 2a 07 	call	0xe54	; 0xe54 <uart_read_count>
     ed8:	89 2b       	or	r24, r25
     eda:	59 f7       	brne	.-42     	; 0xeb2 <uart_get_string+0x14>
	{
		c[i] = uart_read();
		i++;
		_delay_ms(100); // busy wait, 500ms
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	ff 90       	pop	r15
     ee6:	ef 90       	pop	r14
     ee8:	08 95       	ret

00000eea <__divsf3>:
     eea:	0e 94 89 07 	call	0xf12	; 0xf12 <__divsf3x>
     eee:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
     ef2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
     ef6:	58 f0       	brcs	.+22     	; 0xf0e <__divsf3+0x24>
     ef8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
     efc:	40 f0       	brcs	.+16     	; 0xf0e <__divsf3+0x24>
     efe:	29 f4       	brne	.+10     	; 0xf0a <__divsf3+0x20>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	29 f0       	breq	.+10     	; 0xf0e <__divsf3+0x24>
     f04:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     f08:	51 11       	cpse	r21, r1
     f0a:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     f0e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>

00000f12 <__divsf3x>:
     f12:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
     f16:	68 f3       	brcs	.-38     	; 0xef2 <__divsf3+0x8>

00000f18 <__divsf3_pse>:
     f18:	99 23       	and	r25, r25
     f1a:	b1 f3       	breq	.-20     	; 0xf08 <__divsf3+0x1e>
     f1c:	55 23       	and	r21, r21
     f1e:	91 f3       	breq	.-28     	; 0xf04 <__divsf3+0x1a>
     f20:	95 1b       	sub	r25, r21
     f22:	55 0b       	sbc	r21, r21
     f24:	bb 27       	eor	r27, r27
     f26:	aa 27       	eor	r26, r26
     f28:	62 17       	cp	r22, r18
     f2a:	73 07       	cpc	r23, r19
     f2c:	84 07       	cpc	r24, r20
     f2e:	38 f0       	brcs	.+14     	; 0xf3e <__divsf3_pse+0x26>
     f30:	9f 5f       	subi	r25, 0xFF	; 255
     f32:	5f 4f       	sbci	r21, 0xFF	; 255
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	44 1f       	adc	r20, r20
     f3a:	aa 1f       	adc	r26, r26
     f3c:	a9 f3       	breq	.-22     	; 0xf28 <__divsf3_pse+0x10>
     f3e:	35 d0       	rcall	.+106    	; 0xfaa <__divsf3_pse+0x92>
     f40:	0e 2e       	mov	r0, r30
     f42:	3a f0       	brmi	.+14     	; 0xf52 <__divsf3_pse+0x3a>
     f44:	e0 e8       	ldi	r30, 0x80	; 128
     f46:	32 d0       	rcall	.+100    	; 0xfac <__divsf3_pse+0x94>
     f48:	91 50       	subi	r25, 0x01	; 1
     f4a:	50 40       	sbci	r21, 0x00	; 0
     f4c:	e6 95       	lsr	r30
     f4e:	00 1c       	adc	r0, r0
     f50:	ca f7       	brpl	.-14     	; 0xf44 <__divsf3_pse+0x2c>
     f52:	2b d0       	rcall	.+86     	; 0xfaa <__divsf3_pse+0x92>
     f54:	fe 2f       	mov	r31, r30
     f56:	29 d0       	rcall	.+82     	; 0xfaa <__divsf3_pse+0x92>
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	bb 1f       	adc	r27, r27
     f60:	26 17       	cp	r18, r22
     f62:	37 07       	cpc	r19, r23
     f64:	48 07       	cpc	r20, r24
     f66:	ab 07       	cpc	r26, r27
     f68:	b0 e8       	ldi	r27, 0x80	; 128
     f6a:	09 f0       	breq	.+2      	; 0xf6e <__divsf3_pse+0x56>
     f6c:	bb 0b       	sbc	r27, r27
     f6e:	80 2d       	mov	r24, r0
     f70:	bf 01       	movw	r22, r30
     f72:	ff 27       	eor	r31, r31
     f74:	93 58       	subi	r25, 0x83	; 131
     f76:	5f 4f       	sbci	r21, 0xFF	; 255
     f78:	3a f0       	brmi	.+14     	; 0xf88 <__divsf3_pse+0x70>
     f7a:	9e 3f       	cpi	r25, 0xFE	; 254
     f7c:	51 05       	cpc	r21, r1
     f7e:	78 f0       	brcs	.+30     	; 0xf9e <__divsf3_pse+0x86>
     f80:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
     f84:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     f88:	5f 3f       	cpi	r21, 0xFF	; 255
     f8a:	e4 f3       	brlt	.-8      	; 0xf84 <__divsf3_pse+0x6c>
     f8c:	98 3e       	cpi	r25, 0xE8	; 232
     f8e:	d4 f3       	brlt	.-12     	; 0xf84 <__divsf3_pse+0x6c>
     f90:	86 95       	lsr	r24
     f92:	77 95       	ror	r23
     f94:	67 95       	ror	r22
     f96:	b7 95       	ror	r27
     f98:	f7 95       	ror	r31
     f9a:	9f 5f       	subi	r25, 0xFF	; 255
     f9c:	c9 f7       	brne	.-14     	; 0xf90 <__divsf3_pse+0x78>
     f9e:	88 0f       	add	r24, r24
     fa0:	91 1d       	adc	r25, r1
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	97 f9       	bld	r25, 7
     fa8:	08 95       	ret
     faa:	e1 e0       	ldi	r30, 0x01	; 1
     fac:	66 0f       	add	r22, r22
     fae:	77 1f       	adc	r23, r23
     fb0:	88 1f       	adc	r24, r24
     fb2:	bb 1f       	adc	r27, r27
     fb4:	62 17       	cp	r22, r18
     fb6:	73 07       	cpc	r23, r19
     fb8:	84 07       	cpc	r24, r20
     fba:	ba 07       	cpc	r27, r26
     fbc:	20 f0       	brcs	.+8      	; 0xfc6 <__divsf3_pse+0xae>
     fbe:	62 1b       	sub	r22, r18
     fc0:	73 0b       	sbc	r23, r19
     fc2:	84 0b       	sbc	r24, r20
     fc4:	ba 0b       	sbc	r27, r26
     fc6:	ee 1f       	adc	r30, r30
     fc8:	88 f7       	brcc	.-30     	; 0xfac <__divsf3_pse+0x94>
     fca:	e0 95       	com	r30
     fcc:	08 95       	ret

00000fce <__fixsfsi>:
     fce:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fixunssfsi>
     fd2:	68 94       	set
     fd4:	b1 11       	cpse	r27, r1
     fd6:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
     fda:	08 95       	ret

00000fdc <__fixunssfsi>:
     fdc:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fp_splitA>
     fe0:	88 f0       	brcs	.+34     	; 0x1004 <__fixunssfsi+0x28>
     fe2:	9f 57       	subi	r25, 0x7F	; 127
     fe4:	98 f0       	brcs	.+38     	; 0x100c <__fixunssfsi+0x30>
     fe6:	b9 2f       	mov	r27, r25
     fe8:	99 27       	eor	r25, r25
     fea:	b7 51       	subi	r27, 0x17	; 23
     fec:	b0 f0       	brcs	.+44     	; 0x101a <__fixunssfsi+0x3e>
     fee:	e1 f0       	breq	.+56     	; 0x1028 <__fixunssfsi+0x4c>
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	1a f0       	brmi	.+6      	; 0x1000 <__fixunssfsi+0x24>
     ffa:	ba 95       	dec	r27
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__fixunssfsi+0x14>
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <__fixunssfsi+0x4c>
    1000:	b1 30       	cpi	r27, 0x01	; 1
    1002:	91 f0       	breq	.+36     	; 0x1028 <__fixunssfsi+0x4c>
    1004:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_zero>
    1008:	b1 e0       	ldi	r27, 0x01	; 1
    100a:	08 95       	ret
    100c:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__fp_zero>
    1010:	67 2f       	mov	r22, r23
    1012:	78 2f       	mov	r23, r24
    1014:	88 27       	eor	r24, r24
    1016:	b8 5f       	subi	r27, 0xF8	; 248
    1018:	39 f0       	breq	.+14     	; 0x1028 <__fixunssfsi+0x4c>
    101a:	b9 3f       	cpi	r27, 0xF9	; 249
    101c:	cc f3       	brlt	.-14     	; 0x1010 <__fixunssfsi+0x34>
    101e:	86 95       	lsr	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	b3 95       	inc	r27
    1026:	d9 f7       	brne	.-10     	; 0x101e <__fixunssfsi+0x42>
    1028:	3e f4       	brtc	.+14     	; 0x1038 <__fixunssfsi+0x5c>
    102a:	90 95       	com	r25
    102c:	80 95       	com	r24
    102e:	70 95       	com	r23
    1030:	61 95       	neg	r22
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	08 95       	ret

0000103a <__floatunsisf>:
    103a:	e8 94       	clt
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <__floatsisf+0x12>

0000103e <__floatsisf>:
    103e:	97 fb       	bst	r25, 7
    1040:	3e f4       	brtc	.+14     	; 0x1050 <__floatsisf+0x12>
    1042:	90 95       	com	r25
    1044:	80 95       	com	r24
    1046:	70 95       	com	r23
    1048:	61 95       	neg	r22
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	99 23       	and	r25, r25
    1052:	a9 f0       	breq	.+42     	; 0x107e <__floatsisf+0x40>
    1054:	f9 2f       	mov	r31, r25
    1056:	96 e9       	ldi	r25, 0x96	; 150
    1058:	bb 27       	eor	r27, r27
    105a:	93 95       	inc	r25
    105c:	f6 95       	lsr	r31
    105e:	87 95       	ror	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f1 11       	cpse	r31, r1
    1068:	f8 cf       	rjmp	.-16     	; 0x105a <__floatsisf+0x1c>
    106a:	fa f4       	brpl	.+62     	; 0x10aa <__floatsisf+0x6c>
    106c:	bb 0f       	add	r27, r27
    106e:	11 f4       	brne	.+4      	; 0x1074 <__floatsisf+0x36>
    1070:	60 ff       	sbrs	r22, 0
    1072:	1b c0       	rjmp	.+54     	; 0x10aa <__floatsisf+0x6c>
    1074:	6f 5f       	subi	r22, 0xFF	; 255
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	8f 4f       	sbci	r24, 0xFF	; 255
    107a:	9f 4f       	sbci	r25, 0xFF	; 255
    107c:	16 c0       	rjmp	.+44     	; 0x10aa <__floatsisf+0x6c>
    107e:	88 23       	and	r24, r24
    1080:	11 f0       	breq	.+4      	; 0x1086 <__floatsisf+0x48>
    1082:	96 e9       	ldi	r25, 0x96	; 150
    1084:	11 c0       	rjmp	.+34     	; 0x10a8 <__floatsisf+0x6a>
    1086:	77 23       	and	r23, r23
    1088:	21 f0       	breq	.+8      	; 0x1092 <__floatsisf+0x54>
    108a:	9e e8       	ldi	r25, 0x8E	; 142
    108c:	87 2f       	mov	r24, r23
    108e:	76 2f       	mov	r23, r22
    1090:	05 c0       	rjmp	.+10     	; 0x109c <__floatsisf+0x5e>
    1092:	66 23       	and	r22, r22
    1094:	71 f0       	breq	.+28     	; 0x10b2 <__floatsisf+0x74>
    1096:	96 e8       	ldi	r25, 0x86	; 134
    1098:	86 2f       	mov	r24, r22
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	60 e0       	ldi	r22, 0x00	; 0
    109e:	2a f0       	brmi	.+10     	; 0x10aa <__floatsisf+0x6c>
    10a0:	9a 95       	dec	r25
    10a2:	66 0f       	add	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 1f       	adc	r24, r24
    10a8:	da f7       	brpl	.-10     	; 0x10a0 <__floatsisf+0x62>
    10aa:	88 0f       	add	r24, r24
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	97 f9       	bld	r25, 7
    10b2:	08 95       	ret

000010b4 <__fp_inf>:
    10b4:	97 f9       	bld	r25, 7
    10b6:	9f 67       	ori	r25, 0x7F	; 127
    10b8:	80 e8       	ldi	r24, 0x80	; 128
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	08 95       	ret

000010c0 <__fp_nan>:
    10c0:	9f ef       	ldi	r25, 0xFF	; 255
    10c2:	80 ec       	ldi	r24, 0xC0	; 192
    10c4:	08 95       	ret

000010c6 <__fp_pscA>:
    10c6:	00 24       	eor	r0, r0
    10c8:	0a 94       	dec	r0
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	18 06       	cpc	r1, r24
    10d0:	09 06       	cpc	r0, r25
    10d2:	08 95       	ret

000010d4 <__fp_pscB>:
    10d4:	00 24       	eor	r0, r0
    10d6:	0a 94       	dec	r0
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	05 06       	cpc	r0, r21
    10e0:	08 95       	ret

000010e2 <__fp_round>:
    10e2:	09 2e       	mov	r0, r25
    10e4:	03 94       	inc	r0
    10e6:	00 0c       	add	r0, r0
    10e8:	11 f4       	brne	.+4      	; 0x10ee <__fp_round+0xc>
    10ea:	88 23       	and	r24, r24
    10ec:	52 f0       	brmi	.+20     	; 0x1102 <__fp_round+0x20>
    10ee:	bb 0f       	add	r27, r27
    10f0:	40 f4       	brcc	.+16     	; 0x1102 <__fp_round+0x20>
    10f2:	bf 2b       	or	r27, r31
    10f4:	11 f4       	brne	.+4      	; 0x10fa <__fp_round+0x18>
    10f6:	60 ff       	sbrs	r22, 0
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <__fp_round+0x20>
    10fa:	6f 5f       	subi	r22, 0xFF	; 255
    10fc:	7f 4f       	sbci	r23, 0xFF	; 255
    10fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1100:	9f 4f       	sbci	r25, 0xFF	; 255
    1102:	08 95       	ret

00001104 <__fp_split3>:
    1104:	57 fd       	sbrc	r21, 7
    1106:	90 58       	subi	r25, 0x80	; 128
    1108:	44 0f       	add	r20, r20
    110a:	55 1f       	adc	r21, r21
    110c:	59 f0       	breq	.+22     	; 0x1124 <__fp_splitA+0x10>
    110e:	5f 3f       	cpi	r21, 0xFF	; 255
    1110:	71 f0       	breq	.+28     	; 0x112e <__fp_splitA+0x1a>
    1112:	47 95       	ror	r20

00001114 <__fp_splitA>:
    1114:	88 0f       	add	r24, r24
    1116:	97 fb       	bst	r25, 7
    1118:	99 1f       	adc	r25, r25
    111a:	61 f0       	breq	.+24     	; 0x1134 <__fp_splitA+0x20>
    111c:	9f 3f       	cpi	r25, 0xFF	; 255
    111e:	79 f0       	breq	.+30     	; 0x113e <__fp_splitA+0x2a>
    1120:	87 95       	ror	r24
    1122:	08 95       	ret
    1124:	12 16       	cp	r1, r18
    1126:	13 06       	cpc	r1, r19
    1128:	14 06       	cpc	r1, r20
    112a:	55 1f       	adc	r21, r21
    112c:	f2 cf       	rjmp	.-28     	; 0x1112 <__fp_split3+0xe>
    112e:	46 95       	lsr	r20
    1130:	f1 df       	rcall	.-30     	; 0x1114 <__fp_splitA>
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__fp_splitA+0x30>
    1134:	16 16       	cp	r1, r22
    1136:	17 06       	cpc	r1, r23
    1138:	18 06       	cpc	r1, r24
    113a:	99 1f       	adc	r25, r25
    113c:	f1 cf       	rjmp	.-30     	; 0x1120 <__fp_splitA+0xc>
    113e:	86 95       	lsr	r24
    1140:	71 05       	cpc	r23, r1
    1142:	61 05       	cpc	r22, r1
    1144:	08 94       	sec
    1146:	08 95       	ret

00001148 <__fp_zero>:
    1148:	e8 94       	clt

0000114a <__fp_szero>:
    114a:	bb 27       	eor	r27, r27
    114c:	66 27       	eor	r22, r22
    114e:	77 27       	eor	r23, r23
    1150:	cb 01       	movw	r24, r22
    1152:	97 f9       	bld	r25, 7
    1154:	08 95       	ret

00001156 <__mulsf3>:
    1156:	0e 94 be 08 	call	0x117c	; 0x117c <__mulsf3x>
    115a:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__fp_round>
    115e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__fp_pscA>
    1162:	38 f0       	brcs	.+14     	; 0x1172 <__mulsf3+0x1c>
    1164:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fp_pscB>
    1168:	20 f0       	brcs	.+8      	; 0x1172 <__mulsf3+0x1c>
    116a:	95 23       	and	r25, r21
    116c:	11 f0       	breq	.+4      	; 0x1172 <__mulsf3+0x1c>
    116e:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    1172:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_nan>
    1176:	11 24       	eor	r1, r1
    1178:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>

0000117c <__mulsf3x>:
    117c:	0e 94 82 08 	call	0x1104	; 0x1104 <__fp_split3>
    1180:	70 f3       	brcs	.-36     	; 0x115e <__mulsf3+0x8>

00001182 <__mulsf3_pse>:
    1182:	95 9f       	mul	r25, r21
    1184:	c1 f3       	breq	.-16     	; 0x1176 <__mulsf3+0x20>
    1186:	95 0f       	add	r25, r21
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	55 1f       	adc	r21, r21
    118c:	62 9f       	mul	r22, r18
    118e:	f0 01       	movw	r30, r0
    1190:	72 9f       	mul	r23, r18
    1192:	bb 27       	eor	r27, r27
    1194:	f0 0d       	add	r31, r0
    1196:	b1 1d       	adc	r27, r1
    1198:	63 9f       	mul	r22, r19
    119a:	aa 27       	eor	r26, r26
    119c:	f0 0d       	add	r31, r0
    119e:	b1 1d       	adc	r27, r1
    11a0:	aa 1f       	adc	r26, r26
    11a2:	64 9f       	mul	r22, r20
    11a4:	66 27       	eor	r22, r22
    11a6:	b0 0d       	add	r27, r0
    11a8:	a1 1d       	adc	r26, r1
    11aa:	66 1f       	adc	r22, r22
    11ac:	82 9f       	mul	r24, r18
    11ae:	22 27       	eor	r18, r18
    11b0:	b0 0d       	add	r27, r0
    11b2:	a1 1d       	adc	r26, r1
    11b4:	62 1f       	adc	r22, r18
    11b6:	73 9f       	mul	r23, r19
    11b8:	b0 0d       	add	r27, r0
    11ba:	a1 1d       	adc	r26, r1
    11bc:	62 1f       	adc	r22, r18
    11be:	83 9f       	mul	r24, r19
    11c0:	a0 0d       	add	r26, r0
    11c2:	61 1d       	adc	r22, r1
    11c4:	22 1f       	adc	r18, r18
    11c6:	74 9f       	mul	r23, r20
    11c8:	33 27       	eor	r19, r19
    11ca:	a0 0d       	add	r26, r0
    11cc:	61 1d       	adc	r22, r1
    11ce:	23 1f       	adc	r18, r19
    11d0:	84 9f       	mul	r24, r20
    11d2:	60 0d       	add	r22, r0
    11d4:	21 1d       	adc	r18, r1
    11d6:	82 2f       	mov	r24, r18
    11d8:	76 2f       	mov	r23, r22
    11da:	6a 2f       	mov	r22, r26
    11dc:	11 24       	eor	r1, r1
    11de:	9f 57       	subi	r25, 0x7F	; 127
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	9a f0       	brmi	.+38     	; 0x120a <__mulsf3_pse+0x88>
    11e4:	f1 f0       	breq	.+60     	; 0x1222 <__mulsf3_pse+0xa0>
    11e6:	88 23       	and	r24, r24
    11e8:	4a f0       	brmi	.+18     	; 0x11fc <__mulsf3_pse+0x7a>
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	bb 1f       	adc	r27, r27
    11f0:	66 1f       	adc	r22, r22
    11f2:	77 1f       	adc	r23, r23
    11f4:	88 1f       	adc	r24, r24
    11f6:	91 50       	subi	r25, 0x01	; 1
    11f8:	50 40       	sbci	r21, 0x00	; 0
    11fa:	a9 f7       	brne	.-22     	; 0x11e6 <__mulsf3_pse+0x64>
    11fc:	9e 3f       	cpi	r25, 0xFE	; 254
    11fe:	51 05       	cpc	r21, r1
    1200:	80 f0       	brcs	.+32     	; 0x1222 <__mulsf3_pse+0xa0>
    1202:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__fp_inf>
    1206:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__fp_szero>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	e4 f3       	brlt	.-8      	; 0x1206 <__mulsf3_pse+0x84>
    120e:	98 3e       	cpi	r25, 0xE8	; 232
    1210:	d4 f3       	brlt	.-12     	; 0x1206 <__mulsf3_pse+0x84>
    1212:	86 95       	lsr	r24
    1214:	77 95       	ror	r23
    1216:	67 95       	ror	r22
    1218:	b7 95       	ror	r27
    121a:	f7 95       	ror	r31
    121c:	e7 95       	ror	r30
    121e:	9f 5f       	subi	r25, 0xFF	; 255
    1220:	c1 f7       	brne	.-16     	; 0x1212 <__mulsf3_pse+0x90>
    1222:	fe 2b       	or	r31, r30
    1224:	88 0f       	add	r24, r24
    1226:	91 1d       	adc	r25, r1
    1228:	96 95       	lsr	r25
    122a:	87 95       	ror	r24
    122c:	97 f9       	bld	r25, 7
    122e:	08 95       	ret

00001230 <__udivmodsi4>:
    1230:	a1 e2       	ldi	r26, 0x21	; 33
    1232:	1a 2e       	mov	r1, r26
    1234:	aa 1b       	sub	r26, r26
    1236:	bb 1b       	sub	r27, r27
    1238:	fd 01       	movw	r30, r26
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <__udivmodsi4_ep>

0000123c <__udivmodsi4_loop>:
    123c:	aa 1f       	adc	r26, r26
    123e:	bb 1f       	adc	r27, r27
    1240:	ee 1f       	adc	r30, r30
    1242:	ff 1f       	adc	r31, r31
    1244:	a2 17       	cp	r26, r18
    1246:	b3 07       	cpc	r27, r19
    1248:	e4 07       	cpc	r30, r20
    124a:	f5 07       	cpc	r31, r21
    124c:	20 f0       	brcs	.+8      	; 0x1256 <__udivmodsi4_ep>
    124e:	a2 1b       	sub	r26, r18
    1250:	b3 0b       	sbc	r27, r19
    1252:	e4 0b       	sbc	r30, r20
    1254:	f5 0b       	sbc	r31, r21

00001256 <__udivmodsi4_ep>:
    1256:	66 1f       	adc	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	1a 94       	dec	r1
    1260:	69 f7       	brne	.-38     	; 0x123c <__udivmodsi4_loop>
    1262:	60 95       	com	r22
    1264:	70 95       	com	r23
    1266:	80 95       	com	r24
    1268:	90 95       	com	r25
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	bd 01       	movw	r22, r26
    1270:	cf 01       	movw	r24, r30
    1272:	08 95       	ret

00001274 <__umulhisi3>:
    1274:	a2 9f       	mul	r26, r18
    1276:	b0 01       	movw	r22, r0
    1278:	b3 9f       	mul	r27, r19
    127a:	c0 01       	movw	r24, r0
    127c:	a3 9f       	mul	r26, r19
    127e:	70 0d       	add	r23, r0
    1280:	81 1d       	adc	r24, r1
    1282:	11 24       	eor	r1, r1
    1284:	91 1d       	adc	r25, r1
    1286:	b2 9f       	mul	r27, r18
    1288:	70 0d       	add	r23, r0
    128a:	81 1d       	adc	r24, r1
    128c:	11 24       	eor	r1, r1
    128e:	91 1d       	adc	r25, r1
    1290:	08 95       	ret

00001292 <__muluhisi3>:
    1292:	0e 94 3a 09 	call	0x1274	; 0x1274 <__umulhisi3>
    1296:	a5 9f       	mul	r26, r21
    1298:	90 0d       	add	r25, r0
    129a:	b4 9f       	mul	r27, r20
    129c:	90 0d       	add	r25, r0
    129e:	a4 9f       	mul	r26, r20
    12a0:	80 0d       	add	r24, r0
    12a2:	91 1d       	adc	r25, r1
    12a4:	11 24       	eor	r1, r1
    12a6:	08 95       	ret

000012a8 <strcpy>:
    12a8:	fb 01       	movw	r30, r22
    12aa:	dc 01       	movw	r26, r24
    12ac:	01 90       	ld	r0, Z+
    12ae:	0d 92       	st	X+, r0
    12b0:	00 20       	and	r0, r0
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <strcpy+0x4>
    12b4:	08 95       	ret

000012b6 <strncmp>:
    12b6:	fb 01       	movw	r30, r22
    12b8:	dc 01       	movw	r26, r24
    12ba:	41 50       	subi	r20, 0x01	; 1
    12bc:	50 40       	sbci	r21, 0x00	; 0
    12be:	30 f0       	brcs	.+12     	; 0x12cc <strncmp+0x16>
    12c0:	8d 91       	ld	r24, X+
    12c2:	01 90       	ld	r0, Z+
    12c4:	80 19       	sub	r24, r0
    12c6:	19 f4       	brne	.+6      	; 0x12ce <strncmp+0x18>
    12c8:	00 20       	and	r0, r0
    12ca:	b9 f7       	brne	.-18     	; 0x12ba <strncmp+0x4>
    12cc:	88 1b       	sub	r24, r24
    12ce:	99 0b       	sbc	r25, r25
    12d0:	08 95       	ret

000012d2 <sprintf>:
    12d2:	ae e0       	ldi	r26, 0x0E	; 14
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	ef e6       	ldi	r30, 0x6F	; 111
    12d8:	f9 e0       	ldi	r31, 0x09	; 9
    12da:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__prologue_saves__+0x1c>
    12de:	0d 89       	ldd	r16, Y+21	; 0x15
    12e0:	1e 89       	ldd	r17, Y+22	; 0x16
    12e2:	86 e0       	ldi	r24, 0x06	; 6
    12e4:	8c 83       	std	Y+4, r24	; 0x04
    12e6:	1a 83       	std	Y+2, r17	; 0x02
    12e8:	09 83       	std	Y+1, r16	; 0x01
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	9f e7       	ldi	r25, 0x7F	; 127
    12ee:	9e 83       	std	Y+6, r25	; 0x06
    12f0:	8d 83       	std	Y+5, r24	; 0x05
    12f2:	ae 01       	movw	r20, r28
    12f4:	47 5e       	subi	r20, 0xE7	; 231
    12f6:	5f 4f       	sbci	r21, 0xFF	; 255
    12f8:	6f 89       	ldd	r22, Y+23	; 0x17
    12fa:	78 8d       	ldd	r23, Y+24	; 0x18
    12fc:	ce 01       	movw	r24, r28
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	0e 94 8b 09 	call	0x1316	; 0x1316 <vfprintf>
    1304:	ef 81       	ldd	r30, Y+7	; 0x07
    1306:	f8 85       	ldd	r31, Y+8	; 0x08
    1308:	e0 0f       	add	r30, r16
    130a:	f1 1f       	adc	r31, r17
    130c:	10 82       	st	Z, r1
    130e:	2e 96       	adiw	r28, 0x0e	; 14
    1310:	e4 e0       	ldi	r30, 0x04	; 4
    1312:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__epilogue_restores__+0x1c>

00001316 <vfprintf>:
    1316:	ab e0       	ldi	r26, 0x0B	; 11
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e1 e9       	ldi	r30, 0x91	; 145
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	0c 94 32 0c 	jmp	0x1864	; 0x1864 <__prologue_saves__>
    1322:	6c 01       	movw	r12, r24
    1324:	7b 01       	movw	r14, r22
    1326:	8a 01       	movw	r16, r20
    1328:	fc 01       	movw	r30, r24
    132a:	17 82       	std	Z+7, r1	; 0x07
    132c:	16 82       	std	Z+6, r1	; 0x06
    132e:	83 81       	ldd	r24, Z+3	; 0x03
    1330:	81 ff       	sbrs	r24, 1
    1332:	cc c1       	rjmp	.+920    	; 0x16cc <vfprintf+0x3b6>
    1334:	ce 01       	movw	r24, r28
    1336:	01 96       	adiw	r24, 0x01	; 1
    1338:	3c 01       	movw	r6, r24
    133a:	f6 01       	movw	r30, r12
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	f7 01       	movw	r30, r14
    1340:	93 fd       	sbrc	r25, 3
    1342:	85 91       	lpm	r24, Z+
    1344:	93 ff       	sbrs	r25, 3
    1346:	81 91       	ld	r24, Z+
    1348:	7f 01       	movw	r14, r30
    134a:	88 23       	and	r24, r24
    134c:	09 f4       	brne	.+2      	; 0x1350 <vfprintf+0x3a>
    134e:	ba c1       	rjmp	.+884    	; 0x16c4 <vfprintf+0x3ae>
    1350:	85 32       	cpi	r24, 0x25	; 37
    1352:	39 f4       	brne	.+14     	; 0x1362 <vfprintf+0x4c>
    1354:	93 fd       	sbrc	r25, 3
    1356:	85 91       	lpm	r24, Z+
    1358:	93 ff       	sbrs	r25, 3
    135a:	81 91       	ld	r24, Z+
    135c:	7f 01       	movw	r14, r30
    135e:	85 32       	cpi	r24, 0x25	; 37
    1360:	29 f4       	brne	.+10     	; 0x136c <vfprintf+0x56>
    1362:	b6 01       	movw	r22, r12
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    136a:	e7 cf       	rjmp	.-50     	; 0x133a <vfprintf+0x24>
    136c:	91 2c       	mov	r9, r1
    136e:	21 2c       	mov	r2, r1
    1370:	31 2c       	mov	r3, r1
    1372:	ff e1       	ldi	r31, 0x1F	; 31
    1374:	f3 15       	cp	r31, r3
    1376:	d8 f0       	brcs	.+54     	; 0x13ae <vfprintf+0x98>
    1378:	8b 32       	cpi	r24, 0x2B	; 43
    137a:	79 f0       	breq	.+30     	; 0x139a <vfprintf+0x84>
    137c:	38 f4       	brcc	.+14     	; 0x138c <vfprintf+0x76>
    137e:	80 32       	cpi	r24, 0x20	; 32
    1380:	79 f0       	breq	.+30     	; 0x13a0 <vfprintf+0x8a>
    1382:	83 32       	cpi	r24, 0x23	; 35
    1384:	a1 f4       	brne	.+40     	; 0x13ae <vfprintf+0x98>
    1386:	23 2d       	mov	r18, r3
    1388:	20 61       	ori	r18, 0x10	; 16
    138a:	1d c0       	rjmp	.+58     	; 0x13c6 <vfprintf+0xb0>
    138c:	8d 32       	cpi	r24, 0x2D	; 45
    138e:	61 f0       	breq	.+24     	; 0x13a8 <vfprintf+0x92>
    1390:	80 33       	cpi	r24, 0x30	; 48
    1392:	69 f4       	brne	.+26     	; 0x13ae <vfprintf+0x98>
    1394:	23 2d       	mov	r18, r3
    1396:	21 60       	ori	r18, 0x01	; 1
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <vfprintf+0xb0>
    139a:	83 2d       	mov	r24, r3
    139c:	82 60       	ori	r24, 0x02	; 2
    139e:	38 2e       	mov	r3, r24
    13a0:	e3 2d       	mov	r30, r3
    13a2:	e4 60       	ori	r30, 0x04	; 4
    13a4:	3e 2e       	mov	r3, r30
    13a6:	2a c0       	rjmp	.+84     	; 0x13fc <vfprintf+0xe6>
    13a8:	f3 2d       	mov	r31, r3
    13aa:	f8 60       	ori	r31, 0x08	; 8
    13ac:	1d c0       	rjmp	.+58     	; 0x13e8 <vfprintf+0xd2>
    13ae:	37 fc       	sbrc	r3, 7
    13b0:	2d c0       	rjmp	.+90     	; 0x140c <vfprintf+0xf6>
    13b2:	20 ed       	ldi	r18, 0xD0	; 208
    13b4:	28 0f       	add	r18, r24
    13b6:	2a 30       	cpi	r18, 0x0A	; 10
    13b8:	40 f0       	brcs	.+16     	; 0x13ca <vfprintf+0xb4>
    13ba:	8e 32       	cpi	r24, 0x2E	; 46
    13bc:	b9 f4       	brne	.+46     	; 0x13ec <vfprintf+0xd6>
    13be:	36 fc       	sbrc	r3, 6
    13c0:	81 c1       	rjmp	.+770    	; 0x16c4 <vfprintf+0x3ae>
    13c2:	23 2d       	mov	r18, r3
    13c4:	20 64       	ori	r18, 0x40	; 64
    13c6:	32 2e       	mov	r3, r18
    13c8:	19 c0       	rjmp	.+50     	; 0x13fc <vfprintf+0xe6>
    13ca:	36 fe       	sbrs	r3, 6
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <vfprintf+0xc4>
    13ce:	8a e0       	ldi	r24, 0x0A	; 10
    13d0:	98 9e       	mul	r9, r24
    13d2:	20 0d       	add	r18, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	92 2e       	mov	r9, r18
    13d8:	11 c0       	rjmp	.+34     	; 0x13fc <vfprintf+0xe6>
    13da:	ea e0       	ldi	r30, 0x0A	; 10
    13dc:	2e 9e       	mul	r2, r30
    13de:	20 0d       	add	r18, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	22 2e       	mov	r2, r18
    13e4:	f3 2d       	mov	r31, r3
    13e6:	f0 62       	ori	r31, 0x20	; 32
    13e8:	3f 2e       	mov	r3, r31
    13ea:	08 c0       	rjmp	.+16     	; 0x13fc <vfprintf+0xe6>
    13ec:	8c 36       	cpi	r24, 0x6C	; 108
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <vfprintf+0xe2>
    13f0:	83 2d       	mov	r24, r3
    13f2:	80 68       	ori	r24, 0x80	; 128
    13f4:	38 2e       	mov	r3, r24
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <vfprintf+0xe6>
    13f8:	88 36       	cpi	r24, 0x68	; 104
    13fa:	41 f4       	brne	.+16     	; 0x140c <vfprintf+0xf6>
    13fc:	f7 01       	movw	r30, r14
    13fe:	93 fd       	sbrc	r25, 3
    1400:	85 91       	lpm	r24, Z+
    1402:	93 ff       	sbrs	r25, 3
    1404:	81 91       	ld	r24, Z+
    1406:	7f 01       	movw	r14, r30
    1408:	81 11       	cpse	r24, r1
    140a:	b3 cf       	rjmp	.-154    	; 0x1372 <vfprintf+0x5c>
    140c:	98 2f       	mov	r25, r24
    140e:	9f 7d       	andi	r25, 0xDF	; 223
    1410:	95 54       	subi	r25, 0x45	; 69
    1412:	93 30       	cpi	r25, 0x03	; 3
    1414:	28 f4       	brcc	.+10     	; 0x1420 <vfprintf+0x10a>
    1416:	0c 5f       	subi	r16, 0xFC	; 252
    1418:	1f 4f       	sbci	r17, 0xFF	; 255
    141a:	9f e3       	ldi	r25, 0x3F	; 63
    141c:	99 83       	std	Y+1, r25	; 0x01
    141e:	0d c0       	rjmp	.+26     	; 0x143a <vfprintf+0x124>
    1420:	83 36       	cpi	r24, 0x63	; 99
    1422:	31 f0       	breq	.+12     	; 0x1430 <vfprintf+0x11a>
    1424:	83 37       	cpi	r24, 0x73	; 115
    1426:	71 f0       	breq	.+28     	; 0x1444 <vfprintf+0x12e>
    1428:	83 35       	cpi	r24, 0x53	; 83
    142a:	09 f0       	breq	.+2      	; 0x142e <vfprintf+0x118>
    142c:	59 c0       	rjmp	.+178    	; 0x14e0 <vfprintf+0x1ca>
    142e:	21 c0       	rjmp	.+66     	; 0x1472 <vfprintf+0x15c>
    1430:	f8 01       	movw	r30, r16
    1432:	80 81       	ld	r24, Z
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	88 24       	eor	r8, r8
    143c:	83 94       	inc	r8
    143e:	91 2c       	mov	r9, r1
    1440:	53 01       	movw	r10, r6
    1442:	13 c0       	rjmp	.+38     	; 0x146a <vfprintf+0x154>
    1444:	28 01       	movw	r4, r16
    1446:	f2 e0       	ldi	r31, 0x02	; 2
    1448:	4f 0e       	add	r4, r31
    144a:	51 1c       	adc	r5, r1
    144c:	f8 01       	movw	r30, r16
    144e:	a0 80       	ld	r10, Z
    1450:	b1 80       	ldd	r11, Z+1	; 0x01
    1452:	36 fe       	sbrs	r3, 6
    1454:	03 c0       	rjmp	.+6      	; 0x145c <vfprintf+0x146>
    1456:	69 2d       	mov	r22, r9
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <vfprintf+0x14a>
    145c:	6f ef       	ldi	r22, 0xFF	; 255
    145e:	7f ef       	ldi	r23, 0xFF	; 255
    1460:	c5 01       	movw	r24, r10
    1462:	0e 94 77 0b 	call	0x16ee	; 0x16ee <strnlen>
    1466:	4c 01       	movw	r8, r24
    1468:	82 01       	movw	r16, r4
    146a:	f3 2d       	mov	r31, r3
    146c:	ff 77       	andi	r31, 0x7F	; 127
    146e:	3f 2e       	mov	r3, r31
    1470:	16 c0       	rjmp	.+44     	; 0x149e <vfprintf+0x188>
    1472:	28 01       	movw	r4, r16
    1474:	22 e0       	ldi	r18, 0x02	; 2
    1476:	42 0e       	add	r4, r18
    1478:	51 1c       	adc	r5, r1
    147a:	f8 01       	movw	r30, r16
    147c:	a0 80       	ld	r10, Z
    147e:	b1 80       	ldd	r11, Z+1	; 0x01
    1480:	36 fe       	sbrs	r3, 6
    1482:	03 c0       	rjmp	.+6      	; 0x148a <vfprintf+0x174>
    1484:	69 2d       	mov	r22, r9
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <vfprintf+0x178>
    148a:	6f ef       	ldi	r22, 0xFF	; 255
    148c:	7f ef       	ldi	r23, 0xFF	; 255
    148e:	c5 01       	movw	r24, r10
    1490:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strnlen_P>
    1494:	4c 01       	movw	r8, r24
    1496:	f3 2d       	mov	r31, r3
    1498:	f0 68       	ori	r31, 0x80	; 128
    149a:	3f 2e       	mov	r3, r31
    149c:	82 01       	movw	r16, r4
    149e:	33 fc       	sbrc	r3, 3
    14a0:	1b c0       	rjmp	.+54     	; 0x14d8 <vfprintf+0x1c2>
    14a2:	82 2d       	mov	r24, r2
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	88 16       	cp	r8, r24
    14a8:	99 06       	cpc	r9, r25
    14aa:	b0 f4       	brcc	.+44     	; 0x14d8 <vfprintf+0x1c2>
    14ac:	b6 01       	movw	r22, r12
    14ae:	80 e2       	ldi	r24, 0x20	; 32
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    14b6:	2a 94       	dec	r2
    14b8:	f4 cf       	rjmp	.-24     	; 0x14a2 <vfprintf+0x18c>
    14ba:	f5 01       	movw	r30, r10
    14bc:	37 fc       	sbrc	r3, 7
    14be:	85 91       	lpm	r24, Z+
    14c0:	37 fe       	sbrs	r3, 7
    14c2:	81 91       	ld	r24, Z+
    14c4:	5f 01       	movw	r10, r30
    14c6:	b6 01       	movw	r22, r12
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    14ce:	21 10       	cpse	r2, r1
    14d0:	2a 94       	dec	r2
    14d2:	21 e0       	ldi	r18, 0x01	; 1
    14d4:	82 1a       	sub	r8, r18
    14d6:	91 08       	sbc	r9, r1
    14d8:	81 14       	cp	r8, r1
    14da:	91 04       	cpc	r9, r1
    14dc:	71 f7       	brne	.-36     	; 0x14ba <vfprintf+0x1a4>
    14de:	e8 c0       	rjmp	.+464    	; 0x16b0 <vfprintf+0x39a>
    14e0:	84 36       	cpi	r24, 0x64	; 100
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <vfprintf+0x1d2>
    14e4:	89 36       	cpi	r24, 0x69	; 105
    14e6:	41 f5       	brne	.+80     	; 0x1538 <vfprintf+0x222>
    14e8:	f8 01       	movw	r30, r16
    14ea:	37 fe       	sbrs	r3, 7
    14ec:	07 c0       	rjmp	.+14     	; 0x14fc <vfprintf+0x1e6>
    14ee:	60 81       	ld	r22, Z
    14f0:	71 81       	ldd	r23, Z+1	; 0x01
    14f2:	82 81       	ldd	r24, Z+2	; 0x02
    14f4:	93 81       	ldd	r25, Z+3	; 0x03
    14f6:	0c 5f       	subi	r16, 0xFC	; 252
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	08 c0       	rjmp	.+16     	; 0x150c <vfprintf+0x1f6>
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	07 2e       	mov	r0, r23
    1502:	00 0c       	add	r0, r0
    1504:	88 0b       	sbc	r24, r24
    1506:	99 0b       	sbc	r25, r25
    1508:	0e 5f       	subi	r16, 0xFE	; 254
    150a:	1f 4f       	sbci	r17, 0xFF	; 255
    150c:	f3 2d       	mov	r31, r3
    150e:	ff 76       	andi	r31, 0x6F	; 111
    1510:	3f 2e       	mov	r3, r31
    1512:	97 ff       	sbrs	r25, 7
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <vfprintf+0x212>
    1516:	90 95       	com	r25
    1518:	80 95       	com	r24
    151a:	70 95       	com	r23
    151c:	61 95       	neg	r22
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	8f 4f       	sbci	r24, 0xFF	; 255
    1522:	9f 4f       	sbci	r25, 0xFF	; 255
    1524:	f0 68       	ori	r31, 0x80	; 128
    1526:	3f 2e       	mov	r3, r31
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	a3 01       	movw	r20, r6
    152e:	0e 94 be 0b 	call	0x177c	; 0x177c <__ultoa_invert>
    1532:	88 2e       	mov	r8, r24
    1534:	86 18       	sub	r8, r6
    1536:	45 c0       	rjmp	.+138    	; 0x15c2 <vfprintf+0x2ac>
    1538:	85 37       	cpi	r24, 0x75	; 117
    153a:	31 f4       	brne	.+12     	; 0x1548 <vfprintf+0x232>
    153c:	23 2d       	mov	r18, r3
    153e:	2f 7e       	andi	r18, 0xEF	; 239
    1540:	b2 2e       	mov	r11, r18
    1542:	2a e0       	ldi	r18, 0x0A	; 10
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	25 c0       	rjmp	.+74     	; 0x1592 <vfprintf+0x27c>
    1548:	93 2d       	mov	r25, r3
    154a:	99 7f       	andi	r25, 0xF9	; 249
    154c:	b9 2e       	mov	r11, r25
    154e:	8f 36       	cpi	r24, 0x6F	; 111
    1550:	c1 f0       	breq	.+48     	; 0x1582 <vfprintf+0x26c>
    1552:	18 f4       	brcc	.+6      	; 0x155a <vfprintf+0x244>
    1554:	88 35       	cpi	r24, 0x58	; 88
    1556:	79 f0       	breq	.+30     	; 0x1576 <vfprintf+0x260>
    1558:	b5 c0       	rjmp	.+362    	; 0x16c4 <vfprintf+0x3ae>
    155a:	80 37       	cpi	r24, 0x70	; 112
    155c:	19 f0       	breq	.+6      	; 0x1564 <vfprintf+0x24e>
    155e:	88 37       	cpi	r24, 0x78	; 120
    1560:	21 f0       	breq	.+8      	; 0x156a <vfprintf+0x254>
    1562:	b0 c0       	rjmp	.+352    	; 0x16c4 <vfprintf+0x3ae>
    1564:	e9 2f       	mov	r30, r25
    1566:	e0 61       	ori	r30, 0x10	; 16
    1568:	be 2e       	mov	r11, r30
    156a:	b4 fe       	sbrs	r11, 4
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <vfprintf+0x272>
    156e:	fb 2d       	mov	r31, r11
    1570:	f4 60       	ori	r31, 0x04	; 4
    1572:	bf 2e       	mov	r11, r31
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <vfprintf+0x272>
    1576:	34 fe       	sbrs	r3, 4
    1578:	0a c0       	rjmp	.+20     	; 0x158e <vfprintf+0x278>
    157a:	29 2f       	mov	r18, r25
    157c:	26 60       	ori	r18, 0x06	; 6
    157e:	b2 2e       	mov	r11, r18
    1580:	06 c0       	rjmp	.+12     	; 0x158e <vfprintf+0x278>
    1582:	28 e0       	ldi	r18, 0x08	; 8
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	05 c0       	rjmp	.+10     	; 0x1592 <vfprintf+0x27c>
    1588:	20 e1       	ldi	r18, 0x10	; 16
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <vfprintf+0x27c>
    158e:	20 e1       	ldi	r18, 0x10	; 16
    1590:	32 e0       	ldi	r19, 0x02	; 2
    1592:	f8 01       	movw	r30, r16
    1594:	b7 fe       	sbrs	r11, 7
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <vfprintf+0x290>
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	0c 5f       	subi	r16, 0xFC	; 252
    15a2:	1f 4f       	sbci	r17, 0xFF	; 255
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <vfprintf+0x29c>
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 5f       	subi	r16, 0xFE	; 254
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	a3 01       	movw	r20, r6
    15b4:	0e 94 be 0b 	call	0x177c	; 0x177c <__ultoa_invert>
    15b8:	88 2e       	mov	r8, r24
    15ba:	86 18       	sub	r8, r6
    15bc:	fb 2d       	mov	r31, r11
    15be:	ff 77       	andi	r31, 0x7F	; 127
    15c0:	3f 2e       	mov	r3, r31
    15c2:	36 fe       	sbrs	r3, 6
    15c4:	0d c0       	rjmp	.+26     	; 0x15e0 <vfprintf+0x2ca>
    15c6:	23 2d       	mov	r18, r3
    15c8:	2e 7f       	andi	r18, 0xFE	; 254
    15ca:	a2 2e       	mov	r10, r18
    15cc:	89 14       	cp	r8, r9
    15ce:	58 f4       	brcc	.+22     	; 0x15e6 <vfprintf+0x2d0>
    15d0:	34 fe       	sbrs	r3, 4
    15d2:	0b c0       	rjmp	.+22     	; 0x15ea <vfprintf+0x2d4>
    15d4:	32 fc       	sbrc	r3, 2
    15d6:	09 c0       	rjmp	.+18     	; 0x15ea <vfprintf+0x2d4>
    15d8:	83 2d       	mov	r24, r3
    15da:	8e 7e       	andi	r24, 0xEE	; 238
    15dc:	a8 2e       	mov	r10, r24
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <vfprintf+0x2d4>
    15e0:	b8 2c       	mov	r11, r8
    15e2:	a3 2c       	mov	r10, r3
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <vfprintf+0x2d6>
    15e6:	b8 2c       	mov	r11, r8
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <vfprintf+0x2d6>
    15ea:	b9 2c       	mov	r11, r9
    15ec:	a4 fe       	sbrs	r10, 4
    15ee:	0f c0       	rjmp	.+30     	; 0x160e <vfprintf+0x2f8>
    15f0:	fe 01       	movw	r30, r28
    15f2:	e8 0d       	add	r30, r8
    15f4:	f1 1d       	adc	r31, r1
    15f6:	80 81       	ld	r24, Z
    15f8:	80 33       	cpi	r24, 0x30	; 48
    15fa:	21 f4       	brne	.+8      	; 0x1604 <vfprintf+0x2ee>
    15fc:	9a 2d       	mov	r25, r10
    15fe:	99 7e       	andi	r25, 0xE9	; 233
    1600:	a9 2e       	mov	r10, r25
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <vfprintf+0x300>
    1604:	a2 fe       	sbrs	r10, 2
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <vfprintf+0x2fe>
    1608:	b3 94       	inc	r11
    160a:	b3 94       	inc	r11
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <vfprintf+0x300>
    160e:	8a 2d       	mov	r24, r10
    1610:	86 78       	andi	r24, 0x86	; 134
    1612:	09 f0       	breq	.+2      	; 0x1616 <vfprintf+0x300>
    1614:	b3 94       	inc	r11
    1616:	a3 fc       	sbrc	r10, 3
    1618:	11 c0       	rjmp	.+34     	; 0x163c <vfprintf+0x326>
    161a:	a0 fe       	sbrs	r10, 0
    161c:	06 c0       	rjmp	.+12     	; 0x162a <vfprintf+0x314>
    161e:	b2 14       	cp	r11, r2
    1620:	88 f4       	brcc	.+34     	; 0x1644 <vfprintf+0x32e>
    1622:	28 0c       	add	r2, r8
    1624:	92 2c       	mov	r9, r2
    1626:	9b 18       	sub	r9, r11
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <vfprintf+0x330>
    162a:	b2 14       	cp	r11, r2
    162c:	60 f4       	brcc	.+24     	; 0x1646 <vfprintf+0x330>
    162e:	b6 01       	movw	r22, r12
    1630:	80 e2       	ldi	r24, 0x20	; 32
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1638:	b3 94       	inc	r11
    163a:	f7 cf       	rjmp	.-18     	; 0x162a <vfprintf+0x314>
    163c:	b2 14       	cp	r11, r2
    163e:	18 f4       	brcc	.+6      	; 0x1646 <vfprintf+0x330>
    1640:	2b 18       	sub	r2, r11
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x332>
    1644:	98 2c       	mov	r9, r8
    1646:	21 2c       	mov	r2, r1
    1648:	a4 fe       	sbrs	r10, 4
    164a:	10 c0       	rjmp	.+32     	; 0x166c <vfprintf+0x356>
    164c:	b6 01       	movw	r22, r12
    164e:	80 e3       	ldi	r24, 0x30	; 48
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1656:	a2 fe       	sbrs	r10, 2
    1658:	17 c0       	rjmp	.+46     	; 0x1688 <vfprintf+0x372>
    165a:	a1 fc       	sbrc	r10, 1
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <vfprintf+0x34e>
    165e:	88 e7       	ldi	r24, 0x78	; 120
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x352>
    1664:	88 e5       	ldi	r24, 0x58	; 88
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	b6 01       	movw	r22, r12
    166a:	0c c0       	rjmp	.+24     	; 0x1684 <vfprintf+0x36e>
    166c:	8a 2d       	mov	r24, r10
    166e:	86 78       	andi	r24, 0x86	; 134
    1670:	59 f0       	breq	.+22     	; 0x1688 <vfprintf+0x372>
    1672:	a1 fe       	sbrs	r10, 1
    1674:	02 c0       	rjmp	.+4      	; 0x167a <vfprintf+0x364>
    1676:	8b e2       	ldi	r24, 0x2B	; 43
    1678:	01 c0       	rjmp	.+2      	; 0x167c <vfprintf+0x366>
    167a:	80 e2       	ldi	r24, 0x20	; 32
    167c:	a7 fc       	sbrc	r10, 7
    167e:	8d e2       	ldi	r24, 0x2D	; 45
    1680:	b6 01       	movw	r22, r12
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1688:	89 14       	cp	r8, r9
    168a:	38 f4       	brcc	.+14     	; 0x169a <vfprintf+0x384>
    168c:	b6 01       	movw	r22, r12
    168e:	80 e3       	ldi	r24, 0x30	; 48
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    1696:	9a 94       	dec	r9
    1698:	f7 cf       	rjmp	.-18     	; 0x1688 <vfprintf+0x372>
    169a:	8a 94       	dec	r8
    169c:	f3 01       	movw	r30, r6
    169e:	e8 0d       	add	r30, r8
    16a0:	f1 1d       	adc	r31, r1
    16a2:	80 81       	ld	r24, Z
    16a4:	b6 01       	movw	r22, r12
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    16ac:	81 10       	cpse	r8, r1
    16ae:	f5 cf       	rjmp	.-22     	; 0x169a <vfprintf+0x384>
    16b0:	22 20       	and	r2, r2
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <vfprintf+0x3a0>
    16b4:	42 ce       	rjmp	.-892    	; 0x133a <vfprintf+0x24>
    16b6:	b6 01       	movw	r22, r12
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 82 0b 	call	0x1704	; 0x1704 <fputc>
    16c0:	2a 94       	dec	r2
    16c2:	f6 cf       	rjmp	.-20     	; 0x16b0 <vfprintf+0x39a>
    16c4:	f6 01       	movw	r30, r12
    16c6:	86 81       	ldd	r24, Z+6	; 0x06
    16c8:	97 81       	ldd	r25, Z+7	; 0x07
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x3ba>
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	2b 96       	adiw	r28, 0x0b	; 11
    16d2:	e2 e1       	ldi	r30, 0x12	; 18
    16d4:	0c 94 4e 0c 	jmp	0x189c	; 0x189c <__epilogue_restores__>

000016d8 <strnlen_P>:
    16d8:	fc 01       	movw	r30, r24
    16da:	05 90       	lpm	r0, Z+
    16dc:	61 50       	subi	r22, 0x01	; 1
    16de:	70 40       	sbci	r23, 0x00	; 0
    16e0:	01 10       	cpse	r0, r1
    16e2:	d8 f7       	brcc	.-10     	; 0x16da <strnlen_P+0x2>
    16e4:	80 95       	com	r24
    16e6:	90 95       	com	r25
    16e8:	8e 0f       	add	r24, r30
    16ea:	9f 1f       	adc	r25, r31
    16ec:	08 95       	ret

000016ee <strnlen>:
    16ee:	fc 01       	movw	r30, r24
    16f0:	61 50       	subi	r22, 0x01	; 1
    16f2:	70 40       	sbci	r23, 0x00	; 0
    16f4:	01 90       	ld	r0, Z+
    16f6:	01 10       	cpse	r0, r1
    16f8:	d8 f7       	brcc	.-10     	; 0x16f0 <strnlen+0x2>
    16fa:	80 95       	com	r24
    16fc:	90 95       	com	r25
    16fe:	8e 0f       	add	r24, r30
    1700:	9f 1f       	adc	r25, r31
    1702:	08 95       	ret

00001704 <fputc>:
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	fb 01       	movw	r30, r22
    170e:	23 81       	ldd	r18, Z+3	; 0x03
    1710:	21 fd       	sbrc	r18, 1
    1712:	03 c0       	rjmp	.+6      	; 0x171a <fputc+0x16>
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	9f ef       	ldi	r25, 0xFF	; 255
    1718:	2c c0       	rjmp	.+88     	; 0x1772 <fputc+0x6e>
    171a:	22 ff       	sbrs	r18, 2
    171c:	16 c0       	rjmp	.+44     	; 0x174a <fputc+0x46>
    171e:	46 81       	ldd	r20, Z+6	; 0x06
    1720:	57 81       	ldd	r21, Z+7	; 0x07
    1722:	24 81       	ldd	r18, Z+4	; 0x04
    1724:	35 81       	ldd	r19, Z+5	; 0x05
    1726:	42 17       	cp	r20, r18
    1728:	53 07       	cpc	r21, r19
    172a:	44 f4       	brge	.+16     	; 0x173c <fputc+0x38>
    172c:	a0 81       	ld	r26, Z
    172e:	b1 81       	ldd	r27, Z+1	; 0x01
    1730:	9d 01       	movw	r18, r26
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	31 83       	std	Z+1, r19	; 0x01
    1738:	20 83       	st	Z, r18
    173a:	8c 93       	st	X, r24
    173c:	26 81       	ldd	r18, Z+6	; 0x06
    173e:	37 81       	ldd	r19, Z+7	; 0x07
    1740:	2f 5f       	subi	r18, 0xFF	; 255
    1742:	3f 4f       	sbci	r19, 0xFF	; 255
    1744:	37 83       	std	Z+7, r19	; 0x07
    1746:	26 83       	std	Z+6, r18	; 0x06
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <fputc+0x6e>
    174a:	8b 01       	movw	r16, r22
    174c:	ec 01       	movw	r28, r24
    174e:	fb 01       	movw	r30, r22
    1750:	00 84       	ldd	r0, Z+8	; 0x08
    1752:	f1 85       	ldd	r31, Z+9	; 0x09
    1754:	e0 2d       	mov	r30, r0
    1756:	09 95       	icall
    1758:	89 2b       	or	r24, r25
    175a:	e1 f6       	brne	.-72     	; 0x1714 <fputc+0x10>
    175c:	d8 01       	movw	r26, r16
    175e:	16 96       	adiw	r26, 0x06	; 6
    1760:	8d 91       	ld	r24, X+
    1762:	9c 91       	ld	r25, X
    1764:	17 97       	sbiw	r26, 0x07	; 7
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	17 96       	adiw	r26, 0x07	; 7
    176a:	9c 93       	st	X, r25
    176c:	8e 93       	st	-X, r24
    176e:	16 97       	sbiw	r26, 0x06	; 6
    1770:	ce 01       	movw	r24, r28
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <__ultoa_invert>:
    177c:	fa 01       	movw	r30, r20
    177e:	aa 27       	eor	r26, r26
    1780:	28 30       	cpi	r18, 0x08	; 8
    1782:	51 f1       	breq	.+84     	; 0x17d8 <__ultoa_invert+0x5c>
    1784:	20 31       	cpi	r18, 0x10	; 16
    1786:	81 f1       	breq	.+96     	; 0x17e8 <__ultoa_invert+0x6c>
    1788:	e8 94       	clt
    178a:	6f 93       	push	r22
    178c:	6e 7f       	andi	r22, 0xFE	; 254
    178e:	6e 5f       	subi	r22, 0xFE	; 254
    1790:	7f 4f       	sbci	r23, 0xFF	; 255
    1792:	8f 4f       	sbci	r24, 0xFF	; 255
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	af 4f       	sbci	r26, 0xFF	; 255
    1798:	b1 e0       	ldi	r27, 0x01	; 1
    179a:	3e d0       	rcall	.+124    	; 0x1818 <__ultoa_invert+0x9c>
    179c:	b4 e0       	ldi	r27, 0x04	; 4
    179e:	3c d0       	rcall	.+120    	; 0x1818 <__ultoa_invert+0x9c>
    17a0:	67 0f       	add	r22, r23
    17a2:	78 1f       	adc	r23, r24
    17a4:	89 1f       	adc	r24, r25
    17a6:	9a 1f       	adc	r25, r26
    17a8:	a1 1d       	adc	r26, r1
    17aa:	68 0f       	add	r22, r24
    17ac:	79 1f       	adc	r23, r25
    17ae:	8a 1f       	adc	r24, r26
    17b0:	91 1d       	adc	r25, r1
    17b2:	a1 1d       	adc	r26, r1
    17b4:	6a 0f       	add	r22, r26
    17b6:	71 1d       	adc	r23, r1
    17b8:	81 1d       	adc	r24, r1
    17ba:	91 1d       	adc	r25, r1
    17bc:	a1 1d       	adc	r26, r1
    17be:	20 d0       	rcall	.+64     	; 0x1800 <__ultoa_invert+0x84>
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <__ultoa_invert+0x48>
    17c2:	68 94       	set
    17c4:	3f 91       	pop	r19
    17c6:	2a e0       	ldi	r18, 0x0A	; 10
    17c8:	26 9f       	mul	r18, r22
    17ca:	11 24       	eor	r1, r1
    17cc:	30 19       	sub	r19, r0
    17ce:	30 5d       	subi	r19, 0xD0	; 208
    17d0:	31 93       	st	Z+, r19
    17d2:	de f6       	brtc	.-74     	; 0x178a <__ultoa_invert+0xe>
    17d4:	cf 01       	movw	r24, r30
    17d6:	08 95       	ret
    17d8:	46 2f       	mov	r20, r22
    17da:	47 70       	andi	r20, 0x07	; 7
    17dc:	40 5d       	subi	r20, 0xD0	; 208
    17de:	41 93       	st	Z+, r20
    17e0:	b3 e0       	ldi	r27, 0x03	; 3
    17e2:	0f d0       	rcall	.+30     	; 0x1802 <__ultoa_invert+0x86>
    17e4:	c9 f7       	brne	.-14     	; 0x17d8 <__ultoa_invert+0x5c>
    17e6:	f6 cf       	rjmp	.-20     	; 0x17d4 <__ultoa_invert+0x58>
    17e8:	46 2f       	mov	r20, r22
    17ea:	4f 70       	andi	r20, 0x0F	; 15
    17ec:	40 5d       	subi	r20, 0xD0	; 208
    17ee:	4a 33       	cpi	r20, 0x3A	; 58
    17f0:	18 f0       	brcs	.+6      	; 0x17f8 <__ultoa_invert+0x7c>
    17f2:	49 5d       	subi	r20, 0xD9	; 217
    17f4:	31 fd       	sbrc	r19, 1
    17f6:	40 52       	subi	r20, 0x20	; 32
    17f8:	41 93       	st	Z+, r20
    17fa:	02 d0       	rcall	.+4      	; 0x1800 <__ultoa_invert+0x84>
    17fc:	a9 f7       	brne	.-22     	; 0x17e8 <__ultoa_invert+0x6c>
    17fe:	ea cf       	rjmp	.-44     	; 0x17d4 <__ultoa_invert+0x58>
    1800:	b4 e0       	ldi	r27, 0x04	; 4
    1802:	a6 95       	lsr	r26
    1804:	97 95       	ror	r25
    1806:	87 95       	ror	r24
    1808:	77 95       	ror	r23
    180a:	67 95       	ror	r22
    180c:	ba 95       	dec	r27
    180e:	c9 f7       	brne	.-14     	; 0x1802 <__ultoa_invert+0x86>
    1810:	00 97       	sbiw	r24, 0x00	; 0
    1812:	61 05       	cpc	r22, r1
    1814:	71 05       	cpc	r23, r1
    1816:	08 95       	ret
    1818:	9b 01       	movw	r18, r22
    181a:	ac 01       	movw	r20, r24
    181c:	0a 2e       	mov	r0, r26
    181e:	06 94       	lsr	r0
    1820:	57 95       	ror	r21
    1822:	47 95       	ror	r20
    1824:	37 95       	ror	r19
    1826:	27 95       	ror	r18
    1828:	ba 95       	dec	r27
    182a:	c9 f7       	brne	.-14     	; 0x181e <__ultoa_invert+0xa2>
    182c:	62 0f       	add	r22, r18
    182e:	73 1f       	adc	r23, r19
    1830:	84 1f       	adc	r24, r20
    1832:	95 1f       	adc	r25, r21
    1834:	a0 1d       	adc	r26, r0
    1836:	08 95       	ret

00001838 <eeprom_read_byte>:
    1838:	f9 99       	sbic	0x1f, 1	; 31
    183a:	fe cf       	rjmp	.-4      	; 0x1838 <eeprom_read_byte>
    183c:	92 bd       	out	0x22, r25	; 34
    183e:	81 bd       	out	0x21, r24	; 33
    1840:	f8 9a       	sbi	0x1f, 0	; 31
    1842:	99 27       	eor	r25, r25
    1844:	80 b5       	in	r24, 0x20	; 32
    1846:	08 95       	ret

00001848 <eeprom_write_byte>:
    1848:	26 2f       	mov	r18, r22

0000184a <eeprom_write_r18>:
    184a:	f9 99       	sbic	0x1f, 1	; 31
    184c:	fe cf       	rjmp	.-4      	; 0x184a <eeprom_write_r18>
    184e:	1f ba       	out	0x1f, r1	; 31
    1850:	92 bd       	out	0x22, r25	; 34
    1852:	81 bd       	out	0x21, r24	; 33
    1854:	20 bd       	out	0x20, r18	; 32
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	fa 9a       	sbi	0x1f, 2	; 31
    185c:	f9 9a       	sbi	0x1f, 1	; 31
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	08 95       	ret

00001864 <__prologue_saves__>:
    1864:	2f 92       	push	r2
    1866:	3f 92       	push	r3
    1868:	4f 92       	push	r4
    186a:	5f 92       	push	r5
    186c:	6f 92       	push	r6
    186e:	7f 92       	push	r7
    1870:	8f 92       	push	r8
    1872:	9f 92       	push	r9
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	ca 1b       	sub	r28, r26
    188e:	db 0b       	sbc	r29, r27
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	09 94       	ijmp

0000189c <__epilogue_restores__>:
    189c:	2a 88       	ldd	r2, Y+18	; 0x12
    189e:	39 88       	ldd	r3, Y+17	; 0x11
    18a0:	48 88       	ldd	r4, Y+16	; 0x10
    18a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    18a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    18a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    18a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    18aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    18ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    18ae:	b9 84       	ldd	r11, Y+9	; 0x09
    18b0:	c8 84       	ldd	r12, Y+8	; 0x08
    18b2:	df 80       	ldd	r13, Y+7	; 0x07
    18b4:	ee 80       	ldd	r14, Y+6	; 0x06
    18b6:	fd 80       	ldd	r15, Y+5	; 0x05
    18b8:	0c 81       	ldd	r16, Y+4	; 0x04
    18ba:	1b 81       	ldd	r17, Y+3	; 0x03
    18bc:	aa 81       	ldd	r26, Y+2	; 0x02
    18be:	b9 81       	ldd	r27, Y+1	; 0x01
    18c0:	ce 0f       	add	r28, r30
    18c2:	d1 1d       	adc	r29, r1
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	ed 01       	movw	r28, r26
    18d0:	08 95       	ret

000018d2 <_exit>:
    18d2:	f8 94       	cli

000018d4 <__stop_program>:
    18d4:	ff cf       	rjmp	.-2      	; 0x18d4 <__stop_program>
